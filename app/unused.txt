com.afollestad.materialdialogs.BuildConfig
com.afollestad.materialdialogs.MaterialDialogKt
com.afollestad.materialdialogs.R
com.afollestad.materialdialogs.input.BuildConfig
com.afollestad.materialdialogs.input.R
com.afollestad.materialdialogs.internal.list.DialogRecyclerViewKt
com.afollestad.materialdialogs.list.ListCallbacksKt
com.azhon.appupdate.BuildConfig
com.azhon.appupdate.R
com.azhon.appupdate.view.NumberProgressBar:
    private static final java.lang.String INSTANCE_MAX
    private static final java.lang.String INSTANCE_PREFIX
    private static final java.lang.String INSTANCE_PROGRESS
    private static final java.lang.String INSTANCE_REACHED_BAR_COLOR
    private static final java.lang.String INSTANCE_REACHED_BAR_HEIGHT
    private static final java.lang.String INSTANCE_STATE
    private static final java.lang.String INSTANCE_SUFFIX
    private static final java.lang.String INSTANCE_TEXT_COLOR
    private static final java.lang.String INSTANCE_TEXT_SIZE
    private static final java.lang.String INSTANCE_TEXT_VISIBILITY
    private static final java.lang.String INSTANCE_UNREACHED_BAR_COLOR
    private static final java.lang.String INSTANCE_UNREACHED_BAR_HEIGHT
    private static final int PROGRESS_TEXT_VISIBLE
    public void incrementProgressBy(int)
com.blankj.utilcode.BuildConfig
com.blankj.utilcode.R
com.blankj.utilcode.constant.CacheConstants
com.blankj.utilcode.constant.MemoryConstants$Unit
com.blankj.utilcode.constant.MemoryConstants
com.blankj.utilcode.constant.PermissionConstants$PermissionGroup
com.blankj.utilcode.constant.PermissionConstants
com.blankj.utilcode.constant.RegexConstants
com.blankj.utilcode.constant.TimeConstants$Unit
com.blankj.utilcode.constant.TimeConstants
com.blankj.utilcode.util.ActivityUtils:
    private void <init>()
    public static void addActivityLifecycleCallbacks(android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    public static void addActivityLifecycleCallbacks(com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    public static void finishActivity(android.app.Activity)
    public static void finishActivity(android.app.Activity,int,int)
    public static void finishActivity(android.app.Activity,boolean)
    public static void finishActivity(java.lang.Class)
    public static void finishActivity(java.lang.Class,int,int)
    public static void finishActivity(java.lang.Class,boolean)
    public static void finishAllActivities(int,int)
    public static void finishAllActivitiesExceptNewest()
    public static void finishAllActivitiesExceptNewest(int,int)
    public static void finishAllActivitiesExceptNewest(boolean)
    public static void finishOtherActivities(java.lang.Class)
    public static void finishOtherActivities(java.lang.Class,int,int)
    public static void finishOtherActivities(java.lang.Class,boolean)
    public static boolean finishToActivity(android.app.Activity,boolean)
    public static boolean finishToActivity(android.app.Activity,boolean,int,int)
    public static boolean finishToActivity(android.app.Activity,boolean,boolean)
    public static boolean finishToActivity(java.lang.Class,boolean)
    public static boolean finishToActivity(java.lang.Class,boolean,int,int)
    public static boolean finishToActivity(java.lang.Class,boolean,boolean)
    public static android.app.Activity getActivityByContext(android.content.Context)
    private static android.app.Activity getActivityByContextInner(android.content.Context)
    private static android.app.Activity getActivityFromDecorContext(android.content.Context)
    public static android.graphics.drawable.Drawable getActivityIcon(android.app.Activity)
    public static android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)
    public static android.graphics.drawable.Drawable getActivityIcon(java.lang.Class)
    public static java.util.List getActivityList()
    public static android.graphics.drawable.Drawable getActivityLogo(android.app.Activity)
    public static android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)
    public static android.graphics.drawable.Drawable getActivityLogo(java.lang.Class)
    public static java.lang.String getLauncherActivity()
    public static java.lang.String getLauncherActivity(java.lang.String)
    public static java.util.List getMainActivities()
    public static java.util.List getMainActivities(java.lang.String)
    private static android.os.Bundle getOptionsBundle(android.app.Activity,android.view.View[])
    private static android.os.Bundle getOptionsBundle(android.content.Context,int,int)
    private static android.os.Bundle getOptionsBundle(androidx.fragment.app.Fragment,int,int)
    private static android.os.Bundle getOptionsBundle(androidx.fragment.app.Fragment,android.view.View[])
    public static android.app.Activity getTopActivity()
    private static android.content.Context getTopActivityOrApp()
    public static boolean isActivityAlive(android.app.Activity)
    public static boolean isActivityAlive(android.content.Context)
    public static boolean isActivityExists(java.lang.String,java.lang.String)
    public static boolean isActivityExistsInStack(android.app.Activity)
    public static boolean isActivityExistsInStack(java.lang.Class)
    private static boolean isIntentAvailable(android.content.Intent)
    public static void removeActivityLifecycleCallbacks(android.app.Activity)
    public static void removeActivityLifecycleCallbacks(android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    public static void removeActivityLifecycleCallbacks(com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    public static void startActivities(android.app.Activity,android.content.Intent[])
    public static void startActivities(android.app.Activity,android.content.Intent[],int,int)
    public static void startActivities(android.app.Activity,android.content.Intent[],android.os.Bundle)
    public static void startActivities(android.content.Intent[])
    public static void startActivities(android.content.Intent[],int,int)
    private static void startActivities(android.content.Intent[],android.content.Context,android.os.Bundle)
    public static void startActivities(android.content.Intent[],android.os.Bundle)
    public static void startActivity(android.app.Activity,android.content.Intent)
    public static void startActivity(android.app.Activity,android.content.Intent,int,int)
    public static void startActivity(android.app.Activity,android.content.Intent,android.os.Bundle)
    public static varargs void startActivity(android.app.Activity,android.content.Intent,android.view.View[])
    public static void startActivity(android.app.Activity,java.lang.Class)
    public static void startActivity(android.app.Activity,java.lang.Class,int,int)
    public static void startActivity(android.app.Activity,java.lang.Class,android.os.Bundle)
    public static varargs void startActivity(android.app.Activity,java.lang.Class,android.view.View[])
    public static void startActivity(android.app.Activity,java.lang.String,java.lang.String)
    public static void startActivity(android.app.Activity,java.lang.String,java.lang.String,int,int)
    public static void startActivity(android.app.Activity,java.lang.String,java.lang.String,android.os.Bundle)
    public static varargs void startActivity(android.app.Activity,java.lang.String,java.lang.String,android.view.View[])
    private static void startActivity(android.content.Context,android.os.Bundle,java.lang.String,java.lang.String,android.os.Bundle)
    public static void startActivity(android.os.Bundle,android.app.Activity,java.lang.Class)
    public static void startActivity(android.os.Bundle,android.app.Activity,java.lang.Class,int,int)
    public static void startActivity(android.os.Bundle,android.app.Activity,java.lang.Class,android.os.Bundle)
    public static varargs void startActivity(android.os.Bundle,android.app.Activity,java.lang.Class,android.view.View[])
    public static void startActivity(android.os.Bundle,android.app.Activity,java.lang.String,java.lang.String)
    public static void startActivity(android.os.Bundle,android.app.Activity,java.lang.String,java.lang.String,int,int)
    public static void startActivity(android.os.Bundle,android.app.Activity,java.lang.String,java.lang.String,android.os.Bundle)
    public static varargs void startActivity(android.os.Bundle,android.app.Activity,java.lang.String,java.lang.String,android.view.View[])
    public static void startActivity(android.os.Bundle,java.lang.Class)
    public static void startActivity(android.os.Bundle,java.lang.Class,int,int)
    public static void startActivity(android.os.Bundle,java.lang.Class,android.os.Bundle)
    public static void startActivity(android.os.Bundle,java.lang.String,java.lang.String)
    public static void startActivity(android.os.Bundle,java.lang.String,java.lang.String,int,int)
    public static void startActivity(android.os.Bundle,java.lang.String,java.lang.String,android.os.Bundle)
    public static void startActivity(java.lang.Class)
    public static void startActivity(java.lang.Class,int,int)
    public static void startActivity(java.lang.Class,android.os.Bundle)
    public static void startActivity(java.lang.String,java.lang.String)
    public static void startActivity(java.lang.String,java.lang.String,int,int)
    public static void startActivity(java.lang.String,java.lang.String,android.os.Bundle)
    public static boolean startActivity(android.content.Intent)
    public static boolean startActivity(android.content.Intent,int,int)
    private static boolean startActivity(android.content.Intent,android.content.Context,android.os.Bundle)
    public static boolean startActivity(android.content.Intent,android.os.Bundle)
    public static void startActivityForResult(android.app.Activity,android.content.Intent,int)
    public static void startActivityForResult(android.app.Activity,android.content.Intent,int,int,int)
    public static void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle)
    public static varargs void startActivityForResult(android.app.Activity,android.content.Intent,int,android.view.View[])
    public static void startActivityForResult(android.app.Activity,java.lang.Class,int)
    public static void startActivityForResult(android.app.Activity,java.lang.Class,int,int,int)
    public static void startActivityForResult(android.app.Activity,java.lang.Class,int,android.os.Bundle)
    public static varargs void startActivityForResult(android.app.Activity,java.lang.Class,int,android.view.View[])
    public static void startActivityForResult(android.os.Bundle,android.app.Activity,java.lang.Class,int)
    public static void startActivityForResult(android.os.Bundle,android.app.Activity,java.lang.Class,int,int,int)
    public static void startActivityForResult(android.os.Bundle,android.app.Activity,java.lang.Class,int,android.os.Bundle)
    public static varargs void startActivityForResult(android.os.Bundle,android.app.Activity,java.lang.Class,int,android.view.View[])
    public static void startActivityForResult(android.os.Bundle,android.app.Activity,java.lang.String,java.lang.String,int)
    public static void startActivityForResult(android.os.Bundle,android.app.Activity,java.lang.String,java.lang.String,int,int,int)
    public static void startActivityForResult(android.os.Bundle,android.app.Activity,java.lang.String,java.lang.String,int,android.os.Bundle)
    public static varargs void startActivityForResult(android.os.Bundle,android.app.Activity,java.lang.String,java.lang.String,int,android.view.View[])
    public static void startActivityForResult(android.os.Bundle,androidx.fragment.app.Fragment,java.lang.Class,int)
    public static void startActivityForResult(android.os.Bundle,androidx.fragment.app.Fragment,java.lang.Class,int,int,int)
    public static void startActivityForResult(android.os.Bundle,androidx.fragment.app.Fragment,java.lang.Class,int,android.os.Bundle)
    public static varargs void startActivityForResult(android.os.Bundle,androidx.fragment.app.Fragment,java.lang.Class,int,android.view.View[])
    public static void startActivityForResult(android.os.Bundle,androidx.fragment.app.Fragment,java.lang.String,java.lang.String,int)
    public static void startActivityForResult(android.os.Bundle,androidx.fragment.app.Fragment,java.lang.String,java.lang.String,int,int,int)
    public static void startActivityForResult(android.os.Bundle,androidx.fragment.app.Fragment,java.lang.String,java.lang.String,int,android.os.Bundle)
    public static varargs void startActivityForResult(android.os.Bundle,androidx.fragment.app.Fragment,java.lang.String,java.lang.String,int,android.view.View[])
    public static void startActivityForResult(androidx.fragment.app.Fragment,android.content.Intent,int)
    public static void startActivityForResult(androidx.fragment.app.Fragment,android.content.Intent,int,int,int)
    public static void startActivityForResult(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)
    public static varargs void startActivityForResult(androidx.fragment.app.Fragment,android.content.Intent,int,android.view.View[])
    public static void startActivityForResult(androidx.fragment.app.Fragment,java.lang.Class,int)
    public static void startActivityForResult(androidx.fragment.app.Fragment,java.lang.Class,int,int,int)
    public static void startActivityForResult(androidx.fragment.app.Fragment,java.lang.Class,int,android.os.Bundle)
    public static varargs void startActivityForResult(androidx.fragment.app.Fragment,java.lang.Class,int,android.view.View[])
    private static boolean startActivityForResult(android.app.Activity,android.os.Bundle,java.lang.String,java.lang.String,int,android.os.Bundle)
    private static boolean startActivityForResult(android.content.Intent,android.app.Activity,int,android.os.Bundle)
    private static boolean startActivityForResult(android.content.Intent,androidx.fragment.app.Fragment,int,android.os.Bundle)
    private static boolean startActivityForResult(androidx.fragment.app.Fragment,android.os.Bundle,java.lang.String,java.lang.String,int,android.os.Bundle)
    public static void startHomeActivity()
    public static void startLauncherActivity()
    public static void startLauncherActivity(java.lang.String)
com.blankj.utilcode.util.AdaptScreenUtils:
    private void <init>()
    public static android.content.res.Resources adaptHeight(android.content.res.Resources,int)
    public static android.content.res.Resources adaptHeight(android.content.res.Resources,int,boolean)
    public static android.content.res.Resources adaptWidth(android.content.res.Resources,int)
    public static android.content.res.Resources closeAdapt(android.content.res.Resources)
    private static int getNavBarHeight(android.content.res.Resources)
    public static int pt2Px(float)
    public static int px2Pt(float)
com.blankj.utilcode.util.ApiUtils$1
com.blankj.utilcode.util.ApiUtils$Api:
    public abstract boolean isMock()
com.blankj.utilcode.util.ApiUtils$BaseApi
com.blankj.utilcode.util.ApiUtils$LazyHolder
com.blankj.utilcode.util.ApiUtils
com.blankj.utilcode.util.AppUtils$AppInfo
com.blankj.utilcode.util.AppUtils:
    private void <init>()
    public static com.blankj.utilcode.util.AppUtils$AppInfo getApkInfo(java.io.File)
    public static com.blankj.utilcode.util.AppUtils$AppInfo getApkInfo(java.lang.String)
    public static android.graphics.drawable.Drawable getAppIcon()
    public static android.graphics.drawable.Drawable getAppIcon(java.lang.String)
    public static int getAppIconId()
    public static int getAppIconId(java.lang.String)
    public static com.blankj.utilcode.util.AppUtils$AppInfo getAppInfo()
    public static com.blankj.utilcode.util.AppUtils$AppInfo getAppInfo(java.lang.String)
    public static int getAppMinSdkVersion()
    public static int getAppMinSdkVersion(java.lang.String)
    public static java.lang.String getAppName()
    public static java.lang.String getAppName(java.lang.String)
    public static java.lang.String getAppPackageName()
    public static java.lang.String getAppPath()
    public static java.lang.String getAppPath(java.lang.String)
    public static android.content.pm.Signature[] getAppSignatures()
    public static android.content.pm.Signature[] getAppSignatures(java.io.File)
    public static android.content.pm.Signature[] getAppSignatures(java.lang.String)
    private static java.util.List getAppSignaturesHash(java.lang.String,java.lang.String)
    public static java.util.List getAppSignaturesMD5()
    public static java.util.List getAppSignaturesMD5(java.lang.String)
    public static java.util.List getAppSignaturesSHA1()
    public static java.util.List getAppSignaturesSHA1(java.lang.String)
    public static java.util.List getAppSignaturesSHA256()
    public static java.util.List getAppSignaturesSHA256(java.lang.String)
    public static int getAppTargetSdkVersion()
    public static int getAppTargetSdkVersion(java.lang.String)
    public static int getAppUid()
    public static int getAppUid(java.lang.String)
    public static int getAppVersionCode()
    public static int getAppVersionCode(java.lang.String)
    public static java.lang.String getAppVersionName()
    public static java.lang.String getAppVersionName(java.lang.String)
    public static java.util.List getAppsInfo()
    private static com.blankj.utilcode.util.AppUtils$AppInfo getBean(android.content.pm.PackageManager,android.content.pm.PackageInfo)
    public static void installApp(android.net.Uri)
    public static void installApp(java.io.File)
    public static void installApp(java.lang.String)
    public static boolean isAppDebug()
    public static boolean isAppDebug(java.lang.String)
    public static boolean isAppForeground()
    public static boolean isAppForeground(java.lang.String)
    public static boolean isAppInstalled(java.lang.String)
    public static boolean isAppRoot()
    public static boolean isAppRunning(java.lang.String)
    public static boolean isAppSystem()
    public static boolean isAppSystem(java.lang.String)
    public static boolean isAppUpgraded()
    public static boolean isFirstTimeInstall()
    public static boolean isFirstTimeInstalled()
    public static void launchApp(java.lang.String)
    public static void launchAppDetailsSettings()
    public static void launchAppDetailsSettings(android.app.Activity,int)
    public static void launchAppDetailsSettings(android.app.Activity,int,java.lang.String)
    public static void launchAppDetailsSettings(java.lang.String)
    public static void relaunchApp()
    public static void relaunchApp(boolean)
    public static void uninstallApp(java.lang.String)
com.blankj.utilcode.util.ArrayUtils$Closure
com.blankj.utilcode.util.ArrayUtils
com.blankj.utilcode.util.BarUtils
com.blankj.utilcode.util.BrightnessUtils
com.blankj.utilcode.util.BusUtils$1
com.blankj.utilcode.util.BusUtils$Bus
com.blankj.utilcode.util.BusUtils$BusInfo
com.blankj.utilcode.util.BusUtils$LazyHolder
com.blankj.utilcode.util.BusUtils
com.blankj.utilcode.util.CacheDiskStaticUtils
com.blankj.utilcode.util.CacheDiskUtils$1
com.blankj.utilcode.util.CacheDiskUtils$DiskCacheHelper
com.blankj.utilcode.util.CacheDiskUtils$DiskCacheManager$1$1
com.blankj.utilcode.util.CacheDiskUtils$DiskCacheManager$1
com.blankj.utilcode.util.CacheDiskUtils$DiskCacheManager$2
com.blankj.utilcode.util.CacheDiskUtils$DiskCacheManager
com.blankj.utilcode.util.CacheDiskUtils
com.blankj.utilcode.util.CacheDoubleStaticUtils
com.blankj.utilcode.util.CacheDoubleUtils
com.blankj.utilcode.util.CacheMemoryStaticUtils
com.blankj.utilcode.util.CacheMemoryUtils$CacheValue
com.blankj.utilcode.util.CacheMemoryUtils
com.blankj.utilcode.util.CleanUtils
com.blankj.utilcode.util.ClickUtils$1
com.blankj.utilcode.util.ClickUtils$2
com.blankj.utilcode.util.ClickUtils$Back2HomeFriendlyListener$1
com.blankj.utilcode.util.ClickUtils$Back2HomeFriendlyListener
com.blankj.utilcode.util.ClickUtils$ClickDrawableWrapper
com.blankj.utilcode.util.ClickUtils$OnDebouncingClickListener$1
com.blankj.utilcode.util.ClickUtils$OnDebouncingClickListener
com.blankj.utilcode.util.ClickUtils$OnMultiClickListener
com.blankj.utilcode.util.ClickUtils$OnUtilsTouchListener$LazyHolder
com.blankj.utilcode.util.ClickUtils$OnUtilsTouchListener
com.blankj.utilcode.util.ClickUtils
com.blankj.utilcode.util.ClipboardUtils
com.blankj.utilcode.util.CloneUtils
com.blankj.utilcode.util.CloseUtils
com.blankj.utilcode.util.CollectionUtils$Closure
com.blankj.utilcode.util.CollectionUtils$Predicate
com.blankj.utilcode.util.CollectionUtils$Transformer
com.blankj.utilcode.util.CollectionUtils
com.blankj.utilcode.util.ColorUtils
com.blankj.utilcode.util.ConvertUtils
com.blankj.utilcode.util.CrashUtils$1
com.blankj.utilcode.util.CrashUtils$CrashInfo
com.blankj.utilcode.util.CrashUtils$OnCrashListener
com.blankj.utilcode.util.CrashUtils
com.blankj.utilcode.util.DebouncingUtils
com.blankj.utilcode.util.DeviceUtils:
    private static final java.lang.String KEY_UDID
    public static java.lang.String[] getABIs()
    private static java.net.InetAddress getInetAddress()
    public static java.lang.String getMacAddress()
    public static varargs java.lang.String getMacAddress(java.lang.String[])
    private static java.lang.String getMacAddressByFile()
    private static java.lang.String getMacAddressByInetAddress()
    private static java.lang.String getMacAddressByNetworkInterface()
    private static java.lang.String getMacAddressByWifiInfo()
    public static java.lang.String getManufacturer()
    public static java.lang.String getModel()
    public static int getSDKVersionCode()
    public static java.lang.String getSDKVersionName()
    public static java.lang.String getUniqueDeviceId(java.lang.String)
    public static java.lang.String getUniqueDeviceId(boolean)
    private static boolean getWifiEnabled()
    public static boolean isAdbEnabled()
    private static varargs boolean isAddressNotInExcepts(java.lang.String,java.lang.String[])
    public static boolean isDevelopmentSettingsEnabled()
    public static boolean isDeviceRooted()
    public static boolean isEmulator()
    private static boolean isEmulatorByCpu()
    public static boolean isSameDevice(java.lang.String)
    public static boolean isTablet()
    private static java.lang.String readCpuInfo()
    private static void setWifiEnabled(boolean)
com.blankj.utilcode.util.EncodeUtils
com.blankj.utilcode.util.EncryptUtils
com.blankj.utilcode.util.FileIOUtils$OnProgressUpdateListener
com.blankj.utilcode.util.FileIOUtils
com.blankj.utilcode.util.FileUtils$1
com.blankj.utilcode.util.FileUtils$2
com.blankj.utilcode.util.FileUtils$3
com.blankj.utilcode.util.FileUtils$OnReplaceListener
com.blankj.utilcode.util.FileUtils
com.blankj.utilcode.util.FlashlightUtils
com.blankj.utilcode.util.FragmentUtils$Args
com.blankj.utilcode.util.FragmentUtils$FragmentNode
com.blankj.utilcode.util.FragmentUtils$OnBackClickListener
com.blankj.utilcode.util.FragmentUtils
com.blankj.utilcode.util.GsonUtils
com.blankj.utilcode.util.ImageUtils
com.blankj.utilcode.util.IntentUtils
com.blankj.utilcode.util.JsonUtils
com.blankj.utilcode.util.KeyboardUtils$1:
    void <init>(android.os.Handler)
com.blankj.utilcode.util.KeyboardUtils$2
com.blankj.utilcode.util.KeyboardUtils$3
com.blankj.utilcode.util.KeyboardUtils$OnSoftInputChangedListener
com.blankj.utilcode.util.KeyboardUtils:
    private static final int TAG_ON_GLOBAL_LAYOUT_LISTENER
    private static long millis
    private void <init>()
    static synthetic int access$000(android.view.Window)
    static synthetic int access$100(android.view.Window)
    public static void clickBlankArea2HideSoftInput()
    public static void fixAndroidBug5497(android.app.Activity)
    public static void fixAndroidBug5497(android.view.Window)
    private static int getContentViewInvisibleHeight(android.view.Window)
    private static int getDecorViewInvisibleHeight(android.view.Window)
    public static void hideSoftInput(android.app.Activity)
    public static void hideSoftInput(android.view.View)
    public static void hideSoftInput(android.view.Window)
    public static void hideSoftInputByToggle(android.app.Activity)
    public static boolean isSoftInputVisible(android.app.Activity)
    public static void registerSoftInputChangedListener(android.app.Activity,com.blankj.utilcode.util.KeyboardUtils$OnSoftInputChangedListener)
    public static void registerSoftInputChangedListener(android.view.Window,com.blankj.utilcode.util.KeyboardUtils$OnSoftInputChangedListener)
    public static void showSoftInput()
    public static void showSoftInput(android.app.Activity)
    public static void showSoftInput(android.view.View)
    public static void showSoftInput(android.view.View,int)
    public static void unregisterSoftInputChangedListener(android.view.Window)
com.blankj.utilcode.util.LanguageUtils$1
com.blankj.utilcode.util.LanguageUtils$2
com.blankj.utilcode.util.LanguageUtils:
    private static final java.lang.String KEY_LOCALE
    private static final java.lang.String VALUE_FOLLOW_SYSTEM
    private void <init>()
    static synthetic void access$000(boolean)
    public static void applyLanguage(java.util.Locale)
    public static void applyLanguage(java.util.Locale,boolean)
    private static void applyLanguageReal(java.util.Locale,boolean)
    public static void applySystemLanguage()
    public static void applySystemLanguage(boolean)
    public static android.content.Context attachBaseContext(android.content.Context)
    public static java.util.Locale getAppContextLanguage()
    public static java.util.Locale getAppliedLanguage()
    public static java.util.Locale getContextLanguage(android.content.Context)
    public static java.util.Locale getSystemLanguage()
    public static boolean isAppliedLanguage()
    public static boolean isAppliedLanguage(java.util.Locale)
    private static boolean isSameLocale(java.util.Locale,java.util.Locale)
    private static java.lang.String locale2String(java.util.Locale)
    static void pollCheckAppContextLocal(java.util.Locale,int,com.blankj.utilcode.util.Utils$Consumer)
    private static void restart(boolean)
    public static void updateAppContextLanguage(java.util.Locale,com.blankj.utilcode.util.Utils$Consumer)
com.blankj.utilcode.util.LogUtils$1
com.blankj.utilcode.util.LogUtils$2
com.blankj.utilcode.util.LogUtils$3
com.blankj.utilcode.util.LogUtils$4
com.blankj.utilcode.util.LogUtils$Config
com.blankj.utilcode.util.LogUtils$IFileWriter
com.blankj.utilcode.util.LogUtils$IFormatter
com.blankj.utilcode.util.LogUtils$LogFormatter
com.blankj.utilcode.util.LogUtils$OnConsoleOutputListener
com.blankj.utilcode.util.LogUtils$OnFileOutputListener
com.blankj.utilcode.util.LogUtils$TYPE
com.blankj.utilcode.util.LogUtils$TagHead
com.blankj.utilcode.util.LogUtils
com.blankj.utilcode.util.MapUtils$1
com.blankj.utilcode.util.MapUtils$Closure
com.blankj.utilcode.util.MapUtils$Transformer
com.blankj.utilcode.util.MapUtils
com.blankj.utilcode.util.MessengerUtils$Client$1
com.blankj.utilcode.util.MessengerUtils$Client$2
com.blankj.utilcode.util.MessengerUtils$Client
com.blankj.utilcode.util.MessengerUtils:
    private static final java.lang.String KEY_STRING
    private static final int WHAT_SEND
    private static final int WHAT_SUBSCRIBE
    private static final int WHAT_UNSUBSCRIBE
    private static com.blankj.utilcode.util.MessengerUtils$Client sLocalClient
    public void <init>()
    public static void post(java.lang.String,android.os.Bundle)
    public static void register()
    public static void register(java.lang.String)
    private static void startServiceCompat(android.content.Intent)
    public static void subscribe(java.lang.String,com.blankj.utilcode.util.MessengerUtils$MessageCallback)
    public static void unregister()
    public static void unregister(java.lang.String)
    public static void unsubscribe(java.lang.String)
com.blankj.utilcode.util.MetaDataUtils
com.blankj.utilcode.util.NetworkUtils$1
com.blankj.utilcode.util.NetworkUtils$2
com.blankj.utilcode.util.NetworkUtils$3
com.blankj.utilcode.util.NetworkUtils$4
com.blankj.utilcode.util.NetworkUtils$5
com.blankj.utilcode.util.NetworkUtils$6
com.blankj.utilcode.util.NetworkUtils$7
com.blankj.utilcode.util.NetworkUtils$8$1
com.blankj.utilcode.util.NetworkUtils$8
com.blankj.utilcode.util.NetworkUtils$9
com.blankj.utilcode.util.NetworkUtils$NetworkChangedReceiver$LazyHolder:
    private void <init>()
com.blankj.utilcode.util.NetworkUtils$NetworkChangedReceiver:
    boolean isRegistered(com.blankj.utilcode.util.NetworkUtils$OnNetworkStatusChangedListener)
com.blankj.utilcode.util.NetworkUtils$WifiScanResults
com.blankj.utilcode.util.NetworkUtils:
    private static final long SCAN_PERIOD_MILLIS
    private static com.blankj.utilcode.util.NetworkUtils$WifiScanResults sPreWifiScanResults
    private static java.util.Timer sScanWifiTimer
    private void <init>()
    static synthetic java.util.Set access$100()
    static synthetic void access$200()
    static synthetic com.blankj.utilcode.util.NetworkUtils$WifiScanResults access$300()
    static synthetic com.blankj.utilcode.util.NetworkUtils$WifiScanResults access$302(com.blankj.utilcode.util.NetworkUtils$WifiScanResults)
    static synthetic void access$400()
    static synthetic boolean access$600(java.util.List,java.util.List)
    static synthetic void access$700()
    public static void addOnWifiChangedConsumer(com.blankj.utilcode.util.Utils$Consumer)
    public static java.lang.String getBroadcastIpAddress()
    public static java.lang.String getDomainAddress(java.lang.String)
    public static com.blankj.utilcode.util.Utils$Task getDomainAddressAsync(java.lang.String,com.blankj.utilcode.util.Utils$Consumer)
    public static java.lang.String getGatewayByWifi()
    public static java.lang.String getIPAddress(boolean)
    public static com.blankj.utilcode.util.Utils$Task getIPAddressAsync(boolean,com.blankj.utilcode.util.Utils$Consumer)
    public static java.lang.String getIpAddressByWifi()
    public static boolean getMobileDataEnabled()
    public static java.lang.String getNetMaskByWifi()
    public static java.lang.String getNetworkOperatorName()
    public static java.lang.String getSSID()
    public static java.lang.String getServerAddressByWifi()
    public static boolean getWifiEnabled()
    public static com.blankj.utilcode.util.NetworkUtils$WifiScanResults getWifiScanResult()
    public static boolean is4G()
    public static boolean is5G()
    public static boolean isAvailable()
    public static com.blankj.utilcode.util.Utils$Task isAvailableAsync(com.blankj.utilcode.util.Utils$Consumer)
    public static boolean isAvailableByDns()
    public static boolean isAvailableByDns(java.lang.String)
    public static com.blankj.utilcode.util.Utils$Task isAvailableByDnsAsync(java.lang.String,com.blankj.utilcode.util.Utils$Consumer)
    public static void isAvailableByDnsAsync(com.blankj.utilcode.util.Utils$Consumer)
    public static boolean isAvailableByPing()
    public static boolean isAvailableByPing(java.lang.String)
    public static com.blankj.utilcode.util.Utils$Task isAvailableByPingAsync(java.lang.String,com.blankj.utilcode.util.Utils$Consumer)
    public static void isAvailableByPingAsync(com.blankj.utilcode.util.Utils$Consumer)
    public static boolean isBehindProxy()
    public static boolean isConnected()
    public static boolean isMobileData()
    public static boolean isRegisteredNetworkStatusChangedListener(com.blankj.utilcode.util.NetworkUtils$OnNetworkStatusChangedListener)
    private static boolean isSameScanResultContent(android.net.wifi.ScanResult,android.net.wifi.ScanResult)
    private static boolean isSameScanResults(java.util.List,java.util.List)
    public static boolean isUsingVPN()
    public static boolean isWifiAvailable()
    public static com.blankj.utilcode.util.Utils$Task isWifiAvailableAsync(com.blankj.utilcode.util.Utils$Consumer)
    public static boolean isWifiConnected()
    public static void openWirelessSettings()
    public static void removeOnWifiChangedConsumer(com.blankj.utilcode.util.Utils$Consumer)
    public static void setWifiEnabled(boolean)
    private static void startScanWifi()
    private static void startScanWifiIfEnabled()
    private static void stopScanWifi()
com.blankj.utilcode.util.NotificationUtils$ChannelConfig:
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setBypassDnd(boolean)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setDescription(java.lang.String)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setGroup(java.lang.String)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setImportance(int)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setLightColor(int)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setLockscreenVisibility(int)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setName(java.lang.CharSequence)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setShowBadge(boolean)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setSound(android.net.Uri,android.media.AudioAttributes)
    public com.blankj.utilcode.util.NotificationUtils$ChannelConfig setVibrationPattern(long[])
com.blankj.utilcode.util.NotificationUtils$Importance
com.blankj.utilcode.util.NotificationUtils:
    public static final int IMPORTANCE_DEFAULT
    public static final int IMPORTANCE_HIGH
    public static final int IMPORTANCE_LOW
    public static final int IMPORTANCE_MIN
    public static final int IMPORTANCE_NONE
    public static final int IMPORTANCE_UNSPECIFIED
    public void <init>()
    public static boolean areNotificationsEnabled()
    public static void cancel(int)
    public static void cancel(java.lang.String,int)
    public static void cancelAll()
    private static void invokePanels(java.lang.String)
    public static void notify(int,com.blankj.utilcode.util.NotificationUtils$ChannelConfig,com.blankj.utilcode.util.Utils$Consumer)
    public static void notify(int,com.blankj.utilcode.util.Utils$Consumer)
    public static void notify(java.lang.String,int,com.blankj.utilcode.util.NotificationUtils$ChannelConfig,com.blankj.utilcode.util.Utils$Consumer)
    public static void notify(java.lang.String,int,com.blankj.utilcode.util.Utils$Consumer)
    public static void setNotificationBarVisibility(boolean)
com.blankj.utilcode.util.NumberUtils$1
com.blankj.utilcode.util.NumberUtils
com.blankj.utilcode.util.ObjectUtils
com.blankj.utilcode.util.PathUtils
com.blankj.utilcode.util.PermissionUtils$1
com.blankj.utilcode.util.PermissionUtils$FullCallback
com.blankj.utilcode.util.PermissionUtils$OnExplainListener$ShouldRequest
com.blankj.utilcode.util.PermissionUtils$OnExplainListener
com.blankj.utilcode.util.PermissionUtils$OnRationaleListener$ShouldRequest
com.blankj.utilcode.util.PermissionUtils$OnRationaleListener
com.blankj.utilcode.util.PermissionUtils$PermissionActivityImpl$1
com.blankj.utilcode.util.PermissionUtils$PermissionActivityImpl$2
com.blankj.utilcode.util.PermissionUtils$PermissionActivityImpl$3
com.blankj.utilcode.util.PermissionUtils$PermissionActivityImpl
com.blankj.utilcode.util.PermissionUtils$SimpleCallback
com.blankj.utilcode.util.PermissionUtils$SingleCallback
com.blankj.utilcode.util.PermissionUtils$ThemeCallback
com.blankj.utilcode.util.PermissionUtils
com.blankj.utilcode.util.PhoneUtils
com.blankj.utilcode.util.ProcessUtils:
    private void <init>()
    public static java.util.Set getAllBackgroundProcesses()
    public static java.lang.String getForegroundProcessName()
    public static boolean isMainProcess()
    public static java.util.Set killAllBackgroundProcesses()
    public static boolean killBackgroundProcesses(java.lang.String)
com.blankj.utilcode.util.ReflectUtils$1
com.blankj.utilcode.util.ReflectUtils$2
com.blankj.utilcode.util.ReflectUtils$3
com.blankj.utilcode.util.ReflectUtils$NULL
com.blankj.utilcode.util.ReflectUtils
com.blankj.utilcode.util.RegexUtils
com.blankj.utilcode.util.ResourceUtils
com.blankj.utilcode.util.RomUtils$RomInfo
com.blankj.utilcode.util.RomUtils
com.blankj.utilcode.util.SDCardUtils$SDCardInfo
com.blankj.utilcode.util.SDCardUtils
com.blankj.utilcode.util.SPStaticUtils
com.blankj.utilcode.util.SPUtils:
    private void <init>(java.lang.String)
    public void clear()
    public void clear(boolean)
    public boolean contains(java.lang.String)
    public java.util.Map getAll()
    public boolean getBoolean(java.lang.String)
    public boolean getBoolean(java.lang.String,boolean)
    public float getFloat(java.lang.String)
    public float getFloat(java.lang.String,float)
    public static com.blankj.utilcode.util.SPUtils getInstance()
    public static com.blankj.utilcode.util.SPUtils getInstance(int)
    public int getInt(java.lang.String)
    public int getInt(java.lang.String,int)
    public long getLong(java.lang.String)
    public long getLong(java.lang.String,long)
    public java.util.Set getStringSet(java.lang.String)
    public java.util.Set getStringSet(java.lang.String,java.util.Set)
    public void put(java.lang.String,float)
    public void put(java.lang.String,float,boolean)
    public void put(java.lang.String,int)
    public void put(java.lang.String,int,boolean)
    public void put(java.lang.String,long)
    public void put(java.lang.String,long,boolean)
    public void put(java.lang.String,java.util.Set)
    public void put(java.lang.String,java.util.Set,boolean)
    public void put(java.lang.String,boolean)
    public void put(java.lang.String,boolean,boolean)
com.blankj.utilcode.util.ScreenUtils:
    private void <init>()
    public int calculateDistanceByX(android.view.View)
    public int calculateDistanceByY(android.view.View)
    public static int getAppScreenHeight()
    public static float getScreenDensity()
    public static int getScreenDensityDpi()
    public static int getScreenHeight()
    public static int getScreenRotation(android.app.Activity)
    public static int getScreenWidth()
    public static float getScreenXDpi()
    public static float getScreenYDpi()
    public static int getSleepDuration()
    public int getViewX(android.view.View)
    public int getViewY(android.view.View)
    public static boolean isFullScreen(android.app.Activity)
    public static boolean isLandscape()
    public static boolean isPortrait()
    public static boolean isScreenLock()
    public static android.graphics.Bitmap screenShot(android.app.Activity)
    public static android.graphics.Bitmap screenShot(android.app.Activity,boolean)
    public static void setFullScreen(android.app.Activity)
    public static void setLandscape(android.app.Activity)
    public static void setNonFullScreen(android.app.Activity)
    public static void setPortrait(android.app.Activity)
    public static void setSleepDuration(int)
    public static void toggleFullScreen(android.app.Activity)
com.blankj.utilcode.util.ServiceUtils
com.blankj.utilcode.util.ShadowUtils$Config
com.blankj.utilcode.util.ShadowUtils$DrawableWrapper
com.blankj.utilcode.util.ShadowUtils$ShadowDrawable
com.blankj.utilcode.util.ShadowUtils
com.blankj.utilcode.util.ShellUtils$1
com.blankj.utilcode.util.ShellUtils$CommandResult
com.blankj.utilcode.util.ShellUtils
com.blankj.utilcode.util.SizeUtils$1
com.blankj.utilcode.util.SizeUtils$OnGetSizeListener
com.blankj.utilcode.util.SizeUtils:
    private void <init>()
    public static float applyDimension(float,int)
    public static void forceGetViewSize(android.view.View,com.blankj.utilcode.util.SizeUtils$OnGetSizeListener)
    public static int getMeasuredHeight(android.view.View)
    public static int getMeasuredWidth(android.view.View)
    public static int[] measureView(android.view.View)
    public static int px2dp(float)
    public static int px2sp(float)
    public static int sp2px(float)
com.blankj.utilcode.util.SnackbarUtils$Duration
com.blankj.utilcode.util.SnackbarUtils
com.blankj.utilcode.util.SpanUtils$1
com.blankj.utilcode.util.SpanUtils$Align
com.blankj.utilcode.util.SpanUtils$CustomBulletSpan
com.blankj.utilcode.util.SpanUtils$CustomDynamicDrawableSpan
com.blankj.utilcode.util.SpanUtils$CustomImageSpan
com.blankj.utilcode.util.SpanUtils$CustomLineHeightSpan
com.blankj.utilcode.util.SpanUtils$CustomQuoteSpan
com.blankj.utilcode.util.SpanUtils$CustomTypefaceSpan:
    private void <init>(android.graphics.Typeface)
    synthetic void <init>(android.graphics.Typeface,com.blankj.utilcode.util.SpanUtils$1)
com.blankj.utilcode.util.SpanUtils$SerializableSpannableStringBuilder
com.blankj.utilcode.util.SpanUtils$ShaderSpan
com.blankj.utilcode.util.SpanUtils$ShadowSpan
com.blankj.utilcode.util.SpanUtils$SpaceSpan
com.blankj.utilcode.util.SpanUtils$VerticalAlignSpan
com.blankj.utilcode.util.SpanUtils
com.blankj.utilcode.util.StringUtils
com.blankj.utilcode.util.ThreadUtils$1
com.blankj.utilcode.util.ThreadUtils$2
com.blankj.utilcode.util.ThreadUtils$3
com.blankj.utilcode.util.ThreadUtils$LinkedBlockingQueue4Util:
    void <init>(int)
com.blankj.utilcode.util.ThreadUtils$SimpleTask
com.blankj.utilcode.util.ThreadUtils$SyncValue
com.blankj.utilcode.util.ThreadUtils$Task$1
com.blankj.utilcode.util.ThreadUtils$Task$2
com.blankj.utilcode.util.ThreadUtils$Task$3
com.blankj.utilcode.util.ThreadUtils$Task$4
com.blankj.utilcode.util.ThreadUtils$Task$5
com.blankj.utilcode.util.ThreadUtils$Task$OnTimeoutListener
com.blankj.utilcode.util.ThreadUtils$Task
com.blankj.utilcode.util.ThreadUtils$ThreadPoolExecutor4Util:
    private int getSubmittedCount()
com.blankj.utilcode.util.ThreadUtils:
    private static final byte TYPE_CACHED
    private static final byte TYPE_CPU
    private static final byte TYPE_IO
    private static final byte TYPE_SINGLE
    private static java.util.concurrent.Executor sDeliver
    public void <init>()
    static synthetic java.util.concurrent.Executor access$600()
    static synthetic java.util.Map access$700()
    public static void cancel(com.blankj.utilcode.util.ThreadUtils$Task)
    public static void cancel(java.util.List)
    public static void cancel(java.util.concurrent.ExecutorService)
    public static varargs void cancel(com.blankj.utilcode.util.ThreadUtils$Task[])
    private static void execute(java.util.concurrent.ExecutorService,com.blankj.utilcode.util.ThreadUtils$Task)
    private static void execute(java.util.concurrent.ExecutorService,com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit)
    private static void executeAtFixedRate(java.util.concurrent.ExecutorService,com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit)
    public static void executeByCached(com.blankj.utilcode.util.ThreadUtils$Task)
    public static void executeByCached(com.blankj.utilcode.util.ThreadUtils$Task,int)
    public static void executeByCachedAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit)
    public static void executeByCachedAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit,int)
    public static void executeByCachedAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByCachedAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeByCachedWithDelay(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByCachedWithDelay(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeByCpu(com.blankj.utilcode.util.ThreadUtils$Task)
    public static void executeByCpu(com.blankj.utilcode.util.ThreadUtils$Task,int)
    public static void executeByCpuAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit)
    public static void executeByCpuAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit,int)
    public static void executeByCpuAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByCpuAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeByCpuWithDelay(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByCpuWithDelay(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeByCustom(java.util.concurrent.ExecutorService,com.blankj.utilcode.util.ThreadUtils$Task)
    public static void executeByCustomAtFixRate(java.util.concurrent.ExecutorService,com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit)
    public static void executeByCustomAtFixRate(java.util.concurrent.ExecutorService,com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByCustomWithDelay(java.util.concurrent.ExecutorService,com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByFixed(int,com.blankj.utilcode.util.ThreadUtils$Task)
    public static void executeByFixed(int,com.blankj.utilcode.util.ThreadUtils$Task,int)
    public static void executeByFixedAtFixRate(int,com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit)
    public static void executeByFixedAtFixRate(int,com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit,int)
    public static void executeByFixedAtFixRate(int,com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByFixedAtFixRate(int,com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeByFixedWithDelay(int,com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByFixedWithDelay(int,com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeByIo(com.blankj.utilcode.util.ThreadUtils$Task)
    public static void executeByIo(com.blankj.utilcode.util.ThreadUtils$Task,int)
    public static void executeByIoAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit)
    public static void executeByIoAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit,int)
    public static void executeByIoAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByIoAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeByIoWithDelay(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeByIoWithDelay(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeBySingle(com.blankj.utilcode.util.ThreadUtils$Task)
    public static void executeBySingle(com.blankj.utilcode.util.ThreadUtils$Task,int)
    public static void executeBySingleAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit)
    public static void executeBySingleAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,long,java.util.concurrent.TimeUnit,int)
    public static void executeBySingleAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeBySingleAtFixRate(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    public static void executeBySingleWithDelay(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static void executeBySingleWithDelay(com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit,int)
    private static void executeWithDelay(java.util.concurrent.ExecutorService,com.blankj.utilcode.util.ThreadUtils$Task,long,java.util.concurrent.TimeUnit)
    public static java.util.concurrent.ExecutorService getCachedPool(int)
    public static java.util.concurrent.ExecutorService getCpuPool()
    public static java.util.concurrent.ExecutorService getCpuPool(int)
    public static java.util.concurrent.ExecutorService getFixedPool(int)
    public static java.util.concurrent.ExecutorService getFixedPool(int,int)
    private static java.util.concurrent.Executor getGlobalDeliver()
    public static java.util.concurrent.ExecutorService getIoPool()
    public static java.util.concurrent.ExecutorService getIoPool(int)
    public static android.os.Handler getMainHandler()
    public static java.util.concurrent.ExecutorService getSinglePool()
    public static java.util.concurrent.ExecutorService getSinglePool(int)
    public static boolean isMainThread()
    public static void setDeliver(java.util.concurrent.Executor)
com.blankj.utilcode.util.ThrowableUtils
com.blankj.utilcode.util.TimeUtils$1
com.blankj.utilcode.util.TimeUtils
com.blankj.utilcode.util.ToastUtils$1
com.blankj.utilcode.util.ToastUtils$2
com.blankj.utilcode.util.ToastUtils$AbsToast
com.blankj.utilcode.util.ToastUtils$ActivityToast$1
com.blankj.utilcode.util.ToastUtils$ActivityToast$2
com.blankj.utilcode.util.ToastUtils$ActivityToast
com.blankj.utilcode.util.ToastUtils$IToast
com.blankj.utilcode.util.ToastUtils$MODE
com.blankj.utilcode.util.ToastUtils$SystemToast$SafeHandler
com.blankj.utilcode.util.ToastUtils$SystemToast
com.blankj.utilcode.util.ToastUtils$WindowManagerToast$1
com.blankj.utilcode.util.ToastUtils$WindowManagerToast
com.blankj.utilcode.util.ToastUtils
com.blankj.utilcode.util.TouchUtils$Direction
com.blankj.utilcode.util.TouchUtils$OnTouchUtilsListener
com.blankj.utilcode.util.TouchUtils
com.blankj.utilcode.util.UiMessageUtils$1
com.blankj.utilcode.util.UiMessageUtils$LazyHolder
com.blankj.utilcode.util.UiMessageUtils$UiMessage
com.blankj.utilcode.util.UiMessageUtils$UiMessageCallback
com.blankj.utilcode.util.UiMessageUtils
com.blankj.utilcode.util.UriUtils
com.blankj.utilcode.util.Utils$Func1
com.blankj.utilcode.util.Utils$Supplier
com.blankj.utilcode.util.Utils$Task
com.blankj.utilcode.util.Utils:
    private void <init>()
com.blankj.utilcode.util.UtilsActivityLifecycleImpl$1
com.blankj.utilcode.util.UtilsActivityLifecycleImpl$2
com.blankj.utilcode.util.UtilsActivityLifecycleImpl$3
com.blankj.utilcode.util.UtilsActivityLifecycleImpl:
    static synthetic void access$000(com.blankj.utilcode.util.UtilsActivityLifecycleImpl,android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    static synthetic java.util.Map access$100(com.blankj.utilcode.util.UtilsActivityLifecycleImpl)
    static synthetic void access$200(com.blankj.utilcode.util.UtilsActivityLifecycleImpl,android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    void addActivityLifecycleCallbacks(android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    void addActivityLifecycleCallbacks(com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    private void addActivityLifecycleCallbacksInner(android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    android.app.Activity getTopActivity()
    boolean isAppForeground()
    void removeActivityLifecycleCallbacks(android.app.Activity)
    void removeActivityLifecycleCallbacks(android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    void removeActivityLifecycleCallbacks(com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    private void removeActivityLifecycleCallbacksInner(android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
com.blankj.utilcode.util.UtilsBridge$FileHead
com.blankj.utilcode.util.UtilsBridge:
    void <init>()
    static void addActivityLifecycleCallbacks(android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    static void addActivityLifecycleCallbacks(com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    static byte[] base64Decode(byte[])
    static byte[] base64Encode(byte[])
    static byte[] bitmap2Bytes(android.graphics.Bitmap)
    static byte[] bitmap2Bytes(android.graphics.Bitmap,android.graphics.Bitmap$CompressFormat,int)
    static android.graphics.drawable.Drawable bitmap2Drawable(android.graphics.Bitmap)
    static java.lang.String byte2FitMemorySize(long)
    static android.graphics.Bitmap bytes2Bitmap(byte[])
    static android.graphics.drawable.Drawable bytes2Drawable(byte[])
    static java.lang.String bytes2HexString(byte[])
    static org.json.JSONArray bytes2JSONArray(byte[])
    static org.json.JSONObject bytes2JSONObject(byte[])
    static java.lang.Object bytes2Object(byte[])
    static java.lang.Object bytes2Parcelable(byte[],android.os.Parcelable$Creator)
    static java.lang.String bytes2String(byte[])
    static boolean createFileByDeleteOldFile(java.io.File)
    static boolean createOrExistsDir(java.io.File)
    static boolean createOrExistsFile(java.io.File)
    static boolean deleteAllInDir(java.io.File)
    static com.blankj.utilcode.util.Utils$Task doAsync(com.blankj.utilcode.util.Utils$Task)
    static android.graphics.Bitmap drawable2Bitmap(android.graphics.drawable.Drawable)
    static byte[] drawable2Bytes(android.graphics.drawable.Drawable)
    static byte[] drawable2Bytes(android.graphics.drawable.Drawable,android.graphics.Bitmap$CompressFormat,int)
    static boolean equals(java.lang.CharSequence,java.lang.CharSequence)
    static com.blankj.utilcode.util.ShellUtils$CommandResult execCmd(java.lang.String,boolean)
    static android.net.Uri file2Uri(java.io.File)
    static varargs java.lang.String format(java.lang.String,java.lang.Object[])
    static java.lang.String formatJson(java.lang.String)
    static java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)
    static android.app.Activity getActivityByContext(android.content.Context)
    static android.content.Intent getCallIntent(java.lang.String)
    static android.content.Intent getDialIntent(java.lang.String)
    static java.io.File getFileByPath(java.lang.String)
    static java.lang.String getForegroundProcessName()
    static long getFsAvailableSize(java.lang.String)
    static long getFsTotalSize(java.lang.String)
    static java.lang.String getFullStackTrace(java.lang.Throwable)
    static com.google.gson.Gson getGson4LogUtils()
    static android.content.Intent getInstallAppIntent(android.net.Uri)
    static android.content.Intent getInstallAppIntent(java.io.File)
    static android.content.Intent getLaunchAppDetailsSettingsIntent(java.lang.String,boolean)
    static android.content.Intent getLaunchAppIntent(java.lang.String)
    static java.lang.String getLauncherActivity(java.lang.String)
    static int getNavBarHeight()
    static android.content.Intent getSendSmsIntent(java.lang.String,java.lang.String)
    static int getStatusBarHeight()
    static java.lang.String getString(int)
    static varargs java.lang.String getString(int,java.lang.Object[])
    static android.app.Activity getTopActivity()
    static android.content.Intent getUninstallAppIntent(java.lang.String)
    static byte[] hashTemplate(byte[],java.lang.String)
    static byte[] hexString2Bytes(java.lang.String)
    static java.io.ByteArrayOutputStream input2OutputStream(java.io.InputStream)
    static byte[] inputStream2Bytes(java.io.InputStream)
    static java.util.List inputStream2Lines(java.io.InputStream,java.lang.String)
    static boolean isActivityAlive(android.app.Activity)
    static boolean isAppDebug()
    static boolean isAppForeground()
    static boolean isAppInstalled(java.lang.String)
    static boolean isAppRunning(java.lang.String)
    static boolean isFileExists(java.io.File)
    static varargs boolean isGranted(java.lang.String[])
    static boolean isGrantedDrawOverlays()
    static boolean isIntentAvailable(android.content.Intent)
    static boolean isLayoutRtl()
    static boolean isMainProcess()
    static boolean isSDCardEnableByEnvironment()
    static boolean isSamsung()
    static boolean isServiceRunning(java.lang.String)
    static boolean isSpace(java.lang.String)
    static boolean isValid(android.view.View,long)
    static byte[] jsonArray2Bytes(org.json.JSONArray)
    static byte[] jsonObject2Bytes(org.json.JSONObject)
    static android.view.View layoutId2View(int)
    static java.lang.String millis2FitTimeSpan(long,int)
    static void notifySystemToScan(java.io.File)
    static byte[] parcelable2Bytes(android.os.Parcelable)
    static int px2dp(float)
    static int px2sp(float)
    static byte[] readFile2Bytes(java.io.File)
    static void relaunchApp()
    static void removeActivityLifecycleCallbacks(android.app.Activity)
    static void removeActivityLifecycleCallbacks(android.app.Activity,com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    static void removeActivityLifecycleCallbacks(com.blankj.utilcode.util.Utils$ActivityLifecycleCallbacks)
    static byte[] serializable2Bytes(java.io.Serializable)
    static int sp2px(float)
    static void startHomeActivity()
    static byte[] string2Bytes(java.lang.String)
    static java.lang.String toJson(java.lang.Object)
    static void toastCancel()
    static void toastShowShort(java.lang.CharSequence)
    static java.io.File uri2File(android.net.Uri)
    static android.graphics.Bitmap view2Bitmap(android.view.View)
    static boolean writeFileFromBytes(java.io.File,byte[])
    static boolean writeFileFromIS(java.lang.String,java.io.InputStream)
    static boolean writeFileFromString(java.lang.String,java.lang.String,boolean)
com.blankj.utilcode.util.UtilsTransActivity4MainProcess:
    public static void start(android.app.Activity,com.blankj.utilcode.util.Utils$Consumer,com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate)
    public static void start(android.app.Activity,com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate)
    public static void start(com.blankj.utilcode.util.Utils$Consumer,com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate)
    public static void start(com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate)
com.blankj.utilcode.util.UtilsTransActivity:
    protected static final java.lang.String EXTRA_DELEGATE
    public static void start(android.app.Activity,com.blankj.utilcode.util.Utils$Consumer,com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate)
    protected static void start(android.app.Activity,com.blankj.utilcode.util.Utils$Consumer,com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate,java.lang.Class)
    public static void start(android.app.Activity,com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate)
    public static void start(com.blankj.utilcode.util.Utils$Consumer,com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate)
    public static void start(com.blankj.utilcode.util.UtilsTransActivity$TransActivityDelegate)
com.blankj.utilcode.util.VibrateUtils
com.blankj.utilcode.util.ViewUtils
com.blankj.utilcode.util.VolumeUtils
com.blankj.utilcode.util.ZipUtils
com.drake.net.BuildConfig
com.drake.net.R
com.drake.net.reflect.$Gson$Preconditions:
    private void <init>()
com.drake.net.reflect.$Gson$Types:
    private void <init>()
    private static java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)
    public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)
    public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class)
    static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)
    public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class)
    static java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)
    private static int indexOf(java.lang.Object[],java.lang.Object)
    public static java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)
    private static java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type,java.util.Collection)
    static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable)
    public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)
    public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)
com.elvishew.xlog.BuildConfig
com.elvishew.xlog.LogConfiguration$Builder:
    private static final int DEFAULT_LOG_LEVEL
    private static final java.lang.String DEFAULT_TAG
    public void <init>(com.elvishew.xlog.LogConfiguration)
    public com.elvishew.xlog.LogConfiguration$Builder addInterceptor(com.elvishew.xlog.interceptor.Interceptor)
    public com.elvishew.xlog.LogConfiguration$Builder addObjectFormatter(java.lang.Class,com.elvishew.xlog.formatter.message.object.ObjectFormatter)
    public com.elvishew.xlog.LogConfiguration$Builder b()
    public com.elvishew.xlog.LogConfiguration$Builder borderFormatter(com.elvishew.xlog.formatter.border.BorderFormatter)
    public com.elvishew.xlog.LogConfiguration$Builder disableBorder()
    public com.elvishew.xlog.LogConfiguration$Builder disableStackTrace()
    public com.elvishew.xlog.LogConfiguration$Builder disableThreadInfo()
    public com.elvishew.xlog.LogConfiguration$Builder enableBorder()
    public com.elvishew.xlog.LogConfiguration$Builder enableStackTrace(int)
    public com.elvishew.xlog.LogConfiguration$Builder enableStackTrace(java.lang.String,int)
    public com.elvishew.xlog.LogConfiguration$Builder enableThreadInfo()
    com.elvishew.xlog.LogConfiguration$Builder interceptors(java.util.List)
    public com.elvishew.xlog.LogConfiguration$Builder jsonFormatter(com.elvishew.xlog.formatter.message.json.JsonFormatter)
    public com.elvishew.xlog.LogConfiguration$Builder nb()
    public com.elvishew.xlog.LogConfiguration$Builder nst()
    public com.elvishew.xlog.LogConfiguration$Builder nt()
    com.elvishew.xlog.LogConfiguration$Builder objectFormatters(java.util.Map)
    public com.elvishew.xlog.LogConfiguration$Builder st(int)
    public com.elvishew.xlog.LogConfiguration$Builder st(java.lang.String,int)
    public com.elvishew.xlog.LogConfiguration$Builder stackTraceFormatter(com.elvishew.xlog.formatter.stacktrace.StackTraceFormatter)
    public com.elvishew.xlog.LogConfiguration$Builder t()
    public com.elvishew.xlog.LogConfiguration$Builder threadFormatter(com.elvishew.xlog.formatter.thread.ThreadFormatter)
    public com.elvishew.xlog.LogConfiguration$Builder throwableFormatter(com.elvishew.xlog.formatter.message.throwable.ThrowableFormatter)
    public com.elvishew.xlog.LogConfiguration$Builder xmlFormatter(com.elvishew.xlog.formatter.message.xml.XmlFormatter)
com.elvishew.xlog.LogConfiguration:
    static synthetic java.util.Map access$1500(com.elvishew.xlog.LogConfiguration)
    boolean isLoggable(int)
com.elvishew.xlog.LogItem:
    public void <init>(int,java.lang.String,java.lang.String)
com.elvishew.xlog.LogLevel:
    public static final int ALL
    public static final int DEBUG
    public static final int ERROR
    public static final int INFO
    public static final int NONE
    public static final int VERBOSE
    public static final int WARN
    public void <init>()
com.elvishew.xlog.LogUtils
com.elvishew.xlog.Logger$Builder
com.elvishew.xlog.Logger:
    void <init>(com.elvishew.xlog.Logger$Builder)
    public void d(java.lang.String)
    public void d(java.lang.String,java.lang.Throwable)
    public varargs void d(java.lang.String,java.lang.Object[])
    public void d(java.lang.Object[])
    public void e(java.lang.Object)
    public void e(java.lang.String)
    public varargs void e(java.lang.String,java.lang.Object[])
    public void e(java.lang.Object[])
    private varargs java.lang.String formatArgs(java.lang.String,java.lang.Object[])
    public void i(java.lang.Object)
    public void i(java.lang.String)
    public void i(java.lang.String,java.lang.Throwable)
    public varargs void i(java.lang.String,java.lang.Object[])
    public void i(java.lang.Object[])
    public void json(java.lang.String)
    public void log(int,java.lang.Object)
    public void log(int,java.lang.String)
    public void log(int,java.lang.String,java.lang.Throwable)
    public varargs void log(int,java.lang.String,java.lang.Object[])
    public void log(int,java.lang.Object[])
    void println(int,java.lang.String)
    private varargs void println(int,java.lang.String,java.lang.Object[])
    private void println(int,java.lang.Object[])
    public void v(java.lang.Object)
    public void v(java.lang.String)
    public void v(java.lang.String,java.lang.Throwable)
    public varargs void v(java.lang.String,java.lang.Object[])
    public void v(java.lang.Object[])
    public void w(java.lang.Object)
    public void w(java.lang.String)
    public void w(java.lang.String,java.lang.Throwable)
    public varargs void w(java.lang.String,java.lang.Object[])
    public void w(java.lang.Object[])
    public void xml(java.lang.String)
com.elvishew.xlog.R
com.elvishew.xlog.XLog$Log
com.elvishew.xlog.XLog:
    public static com.elvishew.xlog.Logger$Builder addInterceptor(com.elvishew.xlog.interceptor.Interceptor)
    public static com.elvishew.xlog.Logger$Builder addObjectFormatter(java.lang.Class,com.elvishew.xlog.formatter.message.object.ObjectFormatter)
    public static com.elvishew.xlog.Logger$Builder b()
    public static com.elvishew.xlog.Logger$Builder borderFormatter(com.elvishew.xlog.formatter.border.BorderFormatter)
    public static void d(java.lang.String)
    public static void d(java.lang.String,java.lang.Throwable)
    public static varargs void d(java.lang.String,java.lang.Object[])
    public static void d(java.lang.Object[])
    public static com.elvishew.xlog.Logger$Builder disableBorder()
    public static com.elvishew.xlog.Logger$Builder disableStackTrace()
    public static com.elvishew.xlog.Logger$Builder disableThreadInfo()
    public static void e(java.lang.Object)
    public static void e(java.lang.String)
    public static varargs void e(java.lang.String,java.lang.Object[])
    public static void e(java.lang.Object[])
    public static com.elvishew.xlog.Logger$Builder enableBorder()
    public static com.elvishew.xlog.Logger$Builder enableStackTrace(int)
    public static com.elvishew.xlog.Logger$Builder enableStackTrace(java.lang.String,int)
    public static com.elvishew.xlog.Logger$Builder enableThreadInfo()
    public static void i(java.lang.Object)
    public static void i(java.lang.String)
    public static void i(java.lang.String,java.lang.Throwable)
    public static varargs void i(java.lang.String,java.lang.Object[])
    public static void i(java.lang.Object[])
    public static void init()
    public static void init(int)
    public static void init(int,com.elvishew.xlog.LogConfiguration)
    public static varargs void init(int,com.elvishew.xlog.LogConfiguration,com.elvishew.xlog.printer.Printer[])
    public static varargs void init(int,com.elvishew.xlog.printer.Printer[])
    public static void init(com.elvishew.xlog.LogConfiguration)
    public static varargs void init(com.elvishew.xlog.printer.Printer[])
    public static void json(java.lang.String)
    public static com.elvishew.xlog.Logger$Builder jsonFormatter(com.elvishew.xlog.formatter.message.json.JsonFormatter)
    public static void log(int,java.lang.Object)
    public static void log(int,java.lang.String)
    public static void log(int,java.lang.String,java.lang.Throwable)
    public static varargs void log(int,java.lang.String,java.lang.Object[])
    public static void log(int,java.lang.Object[])
    public static com.elvishew.xlog.Logger$Builder logLevel(int)
    public static com.elvishew.xlog.Logger$Builder nb()
    public static com.elvishew.xlog.Logger$Builder nst()
    public static com.elvishew.xlog.Logger$Builder nt()
    public static varargs com.elvishew.xlog.Logger$Builder printers(com.elvishew.xlog.printer.Printer[])
    public static com.elvishew.xlog.Logger$Builder st(int)
    public static com.elvishew.xlog.Logger$Builder st(java.lang.String,int)
    public static com.elvishew.xlog.Logger$Builder stackTraceFormatter(com.elvishew.xlog.formatter.stacktrace.StackTraceFormatter)
    public static com.elvishew.xlog.Logger$Builder t()
    public static com.elvishew.xlog.Logger$Builder tag(java.lang.String)
    public static com.elvishew.xlog.Logger$Builder threadFormatter(com.elvishew.xlog.formatter.thread.ThreadFormatter)
    public static com.elvishew.xlog.Logger$Builder throwableFormatter(com.elvishew.xlog.formatter.message.throwable.ThrowableFormatter)
    public static void v(java.lang.Object)
    public static void v(java.lang.String)
    public static void v(java.lang.String,java.lang.Throwable)
    public static varargs void v(java.lang.String,java.lang.Object[])
    public static void v(java.lang.Object[])
    public static void w(java.lang.Object)
    public static void w(java.lang.String)
    public static void w(java.lang.String,java.lang.Throwable)
    public static varargs void w(java.lang.String,java.lang.Object[])
    public static void w(java.lang.Object[])
    public static void xml(java.lang.String)
    public static com.elvishew.xlog.Logger$Builder xmlFormatter(com.elvishew.xlog.formatter.message.xml.XmlFormatter)
com.elvishew.xlog.flattener.ClassicFlattener
com.elvishew.xlog.flattener.DefaultFlattener:
    public java.lang.CharSequence flatten(int,java.lang.String,java.lang.String)
com.elvishew.xlog.flattener.Flattener
com.elvishew.xlog.flattener.PatternFlattener:
    static final java.lang.String DEFAULT_DATE_FORMAT
    private static final java.lang.String PARAM
    private static final java.lang.String PARAMETER_DATE
    private static final java.lang.String PARAMETER_LEVEL_LONG
    private static final java.lang.String PARAMETER_LEVEL_SHORT
    private static final java.lang.String PARAMETER_MESSAGE
    private static final java.lang.String PARAMETER_TAG
    public java.lang.CharSequence flatten(int,java.lang.String,java.lang.String)
com.elvishew.xlog.formatter.border.DefaultBorderFormatter:
    private static final java.lang.String BOTTOM_HORIZONTAL_BORDER
    private static final java.lang.String DIVIDER_HORIZONTAL_BORDER
    private static final java.lang.String TOP_HORIZONTAL_BORDER
    private static final char VERTICAL_BORDER_CHAR
com.elvishew.xlog.formatter.message.json.DefaultJsonFormatter:
    private static final int JSON_INDENT
    public synthetic bridge java.lang.String format(java.lang.Object)
    public java.lang.String format(java.lang.String)
com.elvishew.xlog.formatter.message.xml.DefaultXmlFormatter:
    private static final int XML_INDENT
    public synthetic bridge java.lang.String format(java.lang.Object)
    public java.lang.String format(java.lang.String)
com.elvishew.xlog.interceptor.AbstractFilterInterceptor
com.elvishew.xlog.interceptor.BlacklistTagsFilterInterceptor
com.elvishew.xlog.interceptor.WhitelistTagsFilterInterceptor
com.elvishew.xlog.internal.DefaultsFactory:
    private static final long DEFAULT_LOG_FILE_MAX_SIZE
    private static final java.lang.String DEFAULT_LOG_FILE_NAME
    public void <init>()
    public static com.elvishew.xlog.flattener.Flattener createFlattener()
    public static com.elvishew.xlog.printer.Printer createPrinter()
com.elvishew.xlog.internal.Platform$Android:
    com.elvishew.xlog.printer.Printer defaultPrinter()
com.elvishew.xlog.internal.Platform:
    com.elvishew.xlog.printer.Printer defaultPrinter()
com.elvishew.xlog.internal.SystemCompat:
    public void <init>()
com.elvishew.xlog.internal.printer.file.backup.BackupUtil:
    public void <init>()
com.elvishew.xlog.internal.util.ObjectToStringUtil:
    public void <init>()
com.elvishew.xlog.internal.util.StackTraceUtil:
    public void <init>()
com.elvishew.xlog.printer.AndroidPrinter:
    static final int DEFAULT_MAX_CHUNK_SIZE
    public void <init>()
    public void <init>(int)
com.elvishew.xlog.printer.ConsolePrinter
com.elvishew.xlog.printer.RemotePrinter
com.elvishew.xlog.printer.SystemPrinter
com.elvishew.xlog.printer.file.FilePrinter$Builder$1
com.elvishew.xlog.printer.file.FilePrinter$Builder:
    public com.elvishew.xlog.printer.file.FilePrinter$Builder logFlattener(com.elvishew.xlog.flattener.Flattener)
    public com.elvishew.xlog.printer.file.FilePrinter$Builder writer(com.elvishew.xlog.printer.file.writer.Writer)
com.elvishew.xlog.printer.file.FilePrinter:
    private static final boolean USE_WORKER
com.elvishew.xlog.printer.file.backup.AbstractBackupStrategy
com.elvishew.xlog.printer.file.backup.BackupStrategy2:
    public static final int NO_LIMIT
com.elvishew.xlog.printer.file.backup.FileSizeBackupStrategy2
com.elvishew.xlog.printer.file.naming.DateFileNameGenerator:
    public java.lang.String generateFileName(int,long)
com.elvishew.xlog.printer.file.naming.LevelFileNameGenerator
com.elvishew.xlog.printer.flattener.DefaultLogFlattener
com.elvishew.xlog.printer.flattener.LogFlattener
com.google.android.odml.image.BitmapExtractor
com.google.android.odml.image.BitmapMlImageBuilder
com.google.android.odml.image.ByteBufferExtractor
com.google.android.odml.image.ByteBufferMlImageBuilder
com.google.android.odml.image.ImageProperties
com.google.android.odml.image.MediaImageExtractor
com.google.android.odml.image.MediaMlImageBuilder
com.google.android.odml.image.MlImage$ImageFormat
com.google.android.odml.image.MlImage$Internal
com.google.android.odml.image.MlImage$StorageType
com.google.android.odml.image.MlImage
com.google.android.odml.image.R
com.google.android.odml.image.zza
com.google.android.odml.image.zzb
com.google.android.odml.image.zzc
com.google.android.odml.image.zzd
com.google.android.odml.image.zze
com.google.android.odml.image.zzf
com.google.android.odml.image.zzg
com.google.android.odml.image.zzh
com.google.android.odml.image.zzi
com.google.android.odml.image.zzj
com.google.flatbuffers.ArrayReadWriteBuf
com.google.flatbuffers.BaseVector
com.google.flatbuffers.BooleanVector
com.google.flatbuffers.ByteBufferReadWriteBuf
com.google.flatbuffers.ByteBufferUtil
com.google.flatbuffers.ByteVector
com.google.flatbuffers.Constants
com.google.flatbuffers.DoubleVector
com.google.flatbuffers.FlatBufferBuilder$ByteBufferBackedInputStream
com.google.flatbuffers.FlatBufferBuilder$ByteBufferFactory
com.google.flatbuffers.FlatBufferBuilder$HeapByteBufferFactory
com.google.flatbuffers.FlatBufferBuilder
com.google.flatbuffers.FlexBuffers$Blob
com.google.flatbuffers.FlexBuffers$Key
com.google.flatbuffers.FlexBuffers$KeyVector
com.google.flatbuffers.FlexBuffers$Map
com.google.flatbuffers.FlexBuffers$Object
com.google.flatbuffers.FlexBuffers$Reference
com.google.flatbuffers.FlexBuffers$Sized
com.google.flatbuffers.FlexBuffers$TypedVector
com.google.flatbuffers.FlexBuffers$Unsigned
com.google.flatbuffers.FlexBuffers$Vector
com.google.flatbuffers.FlexBuffers
com.google.flatbuffers.FlexBuffersBuilder$1
com.google.flatbuffers.FlexBuffersBuilder$Value
com.google.flatbuffers.FlexBuffersBuilder
com.google.flatbuffers.FloatVector
com.google.flatbuffers.IntVector
com.google.flatbuffers.LongVector
com.google.flatbuffers.ReadBuf
com.google.flatbuffers.ReadWriteBuf
com.google.flatbuffers.ShortVector
com.google.flatbuffers.StringVector
com.google.flatbuffers.Struct
com.google.flatbuffers.Table$1
com.google.flatbuffers.Table
com.google.flatbuffers.UnionVector
com.google.flatbuffers.Utf8$DecodeUtil
com.google.flatbuffers.Utf8$UnpairedSurrogateException
com.google.flatbuffers.Utf8
com.google.flatbuffers.Utf8Old$Cache
com.google.flatbuffers.Utf8Old
com.google.flatbuffers.Utf8Safe$UnpairedSurrogateException
com.google.flatbuffers.Utf8Safe
com.google.gson.FieldAttributes:
    java.lang.Object get(java.lang.Object)
    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    public java.util.Collection getAnnotations()
    public java.lang.Class getDeclaredClass()
    public java.lang.reflect.Type getDeclaredType()
    public java.lang.Class getDeclaringClass()
    public java.lang.String getName()
    public boolean hasModifier(int)
    boolean isSynthetic()
com.google.gson.Gson:
    static final boolean DEFAULT_COMPLEX_MAP_KEYS
    static final boolean DEFAULT_ESCAPE_HTML
    static final boolean DEFAULT_JSON_NON_EXECUTABLE
    static final boolean DEFAULT_LENIENT
    static final boolean DEFAULT_PRETTY_PRINT
    static final boolean DEFAULT_SERIALIZE_NULLS
    static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES
    private static final java.lang.String JSON_NON_EXECUTABLE_PREFIX
    public com.google.gson.internal.Excluder excluder()
    public com.google.gson.FieldNamingStrategy fieldNamingStrategy()
    public java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.Class)
    public java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)
    public java.lang.Object fromJson(java.io.Reader,java.lang.Class)
    public boolean htmlSafe()
    public com.google.gson.GsonBuilder newBuilder()
    public com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer)
    public boolean serializeNulls()
    public java.lang.String toJson(com.google.gson.JsonElement)
    public java.lang.String toJson(java.lang.Object)
    public java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)
    public void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)
    public void toJson(com.google.gson.JsonElement,java.lang.Appendable)
    public void toJson(java.lang.Object,java.lang.Appendable)
    public void toJson(java.lang.Object,java.lang.reflect.Type,com.google.gson.stream.JsonWriter)
    public void toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable)
    public com.google.gson.JsonElement toJsonTree(java.lang.Object)
    public com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)
com.google.gson.GsonBuilder
com.google.gson.JsonArray:
    public void <init>(int)
    public void add(java.lang.Boolean)
    public void add(java.lang.Character)
    public void add(java.lang.Number)
    public void add(java.lang.String)
    public void addAll(com.google.gson.JsonArray)
    public boolean contains(com.google.gson.JsonElement)
    public com.google.gson.JsonArray deepCopy()
    public synthetic bridge com.google.gson.JsonElement deepCopy()
    public com.google.gson.JsonElement get(int)
    public java.math.BigDecimal getAsBigDecimal()
    public java.math.BigInteger getAsBigInteger()
    public boolean getAsBoolean()
    public byte getAsByte()
    public char getAsCharacter()
    public double getAsDouble()
    public float getAsFloat()
    public int getAsInt()
    public long getAsLong()
    public java.lang.Number getAsNumber()
    public short getAsShort()
    public java.lang.String getAsString()
    public boolean isEmpty()
    public com.google.gson.JsonElement remove(int)
    public boolean remove(com.google.gson.JsonElement)
    public com.google.gson.JsonElement set(int,com.google.gson.JsonElement)
    public int size()
com.google.gson.JsonDeserializationContext:
    public abstract java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)
com.google.gson.JsonElement:
    public abstract com.google.gson.JsonElement deepCopy()
    public java.math.BigDecimal getAsBigDecimal()
    public java.math.BigInteger getAsBigInteger()
    public boolean getAsBoolean()
    public byte getAsByte()
    public char getAsCharacter()
    public double getAsDouble()
    public float getAsFloat()
    public int getAsInt()
    public com.google.gson.JsonNull getAsJsonNull()
    public long getAsLong()
    public java.lang.Number getAsNumber()
    public short getAsShort()
    public java.lang.String getAsString()
com.google.gson.JsonNull:
    public synthetic bridge com.google.gson.JsonElement deepCopy()
    public com.google.gson.JsonNull deepCopy()
com.google.gson.JsonObject:
    public void addProperty(java.lang.String,java.lang.Boolean)
    public void addProperty(java.lang.String,java.lang.Character)
    public void addProperty(java.lang.String,java.lang.Number)
    public void addProperty(java.lang.String,java.lang.String)
    public synthetic bridge com.google.gson.JsonElement deepCopy()
    public com.google.gson.JsonObject deepCopy()
    public com.google.gson.JsonElement get(java.lang.String)
    public com.google.gson.JsonArray getAsJsonArray(java.lang.String)
    public com.google.gson.JsonObject getAsJsonObject(java.lang.String)
    public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String)
    public boolean has(java.lang.String)
    public java.util.Set keySet()
    public com.google.gson.JsonElement remove(java.lang.String)
    public int size()
com.google.gson.JsonParser
com.google.gson.JsonPrimitive:
    public void <init>(java.lang.Character)
    public synthetic bridge com.google.gson.JsonElement deepCopy()
    public com.google.gson.JsonPrimitive deepCopy()
    public java.math.BigDecimal getAsBigDecimal()
    public java.math.BigInteger getAsBigInteger()
    public byte getAsByte()
    public char getAsCharacter()
    public float getAsFloat()
    public short getAsShort()
com.google.gson.JsonSerializationContext:
    public abstract com.google.gson.JsonElement serialize(java.lang.Object)
    public abstract com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type)
com.google.gson.JsonStreamParser
com.google.gson.TypeAdapter:
    public final java.lang.Object fromJson(java.io.Reader)
    public final java.lang.Object fromJson(java.lang.String)
    public final java.lang.Object fromJsonTree(com.google.gson.JsonElement)
    public final java.lang.String toJson(java.lang.Object)
    public final void toJson(java.io.Writer,java.lang.Object)
com.google.gson.internal.$Gson$Preconditions:
    private void <init>()
com.google.gson.internal.$Gson$Types:
    private void <init>()
com.google.gson.internal.Excluder:
    private static final double IGNORE_VERSIONS
    public com.google.gson.internal.Excluder disableInnerClassSerialization()
    public com.google.gson.internal.Excluder excludeFieldsWithoutExposeAnnotation()
    public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy,boolean,boolean)
    public varargs com.google.gson.internal.Excluder withModifiers(int[])
    public com.google.gson.internal.Excluder withVersion(double)
com.google.gson.internal.GsonBuildConfig
com.google.gson.internal.JavaVersion:
    private void <init>()
com.google.gson.internal.PreJava9DateFormatProvider:
    public void <init>()
    private static java.lang.String getDateFormatPattern(int)
    public static java.text.DateFormat getUSDateFormat(int)
com.google.gson.internal.Primitives:
    private void <init>()
    public static boolean isWrapperType(java.lang.reflect.Type)
    public static java.lang.Class unwrap(java.lang.Class)
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite
com.google.gson.internal.Streams$AppendableWriter
com.google.gson.internal.Streams:
    private void <init>()
    public static java.io.Writer writerForAppendable(java.lang.Appendable)
com.google.gson.internal.bind.DefaultDateTypeAdapter$1
com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType$1:
    protected java.util.Date deserialize(java.util.Date)
com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType:
    public final com.google.gson.TypeAdapterFactory createAdapterFactory(int)
    public final com.google.gson.TypeAdapterFactory createAdapterFactory(int,int)
    public final com.google.gson.TypeAdapterFactory createAdapterFactory(java.lang.String)
    public final com.google.gson.TypeAdapterFactory createDefaultsAdapterFactory()
    private final com.google.gson.TypeAdapterFactory createFactory(com.google.gson.internal.bind.DefaultDateTypeAdapter)
    protected abstract java.util.Date deserialize(java.util.Date)
com.google.gson.internal.bind.DefaultDateTypeAdapter
com.google.gson.internal.bind.JsonTreeReader:
    public void <init>(com.google.gson.JsonElement)
com.google.gson.internal.bind.JsonTreeWriter:
    public com.google.gson.stream.JsonWriter value(double)
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl:
    public java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)
    public com.google.gson.JsonElement serialize(java.lang.Object)
    public com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type)
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory
com.google.gson.internal.bind.TreeTypeAdapter:
    public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,java.lang.Object)
    public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object)
    public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$25:
    private static final java.lang.String DAY_OF_MONTH
    private static final java.lang.String HOUR_OF_DAY
    private static final java.lang.String MINUTE
    private static final java.lang.String MONTH
    private static final java.lang.String SECOND
    private static final java.lang.String YEAR
com.google.gson.internal.bind.TypeAdapters$29
com.google.gson.internal.bind.TypeAdapters:
    private void <init>()
    public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.util.ISO8601Utils:
    private static final java.lang.String UTC_ID
    public void <init>()
    public static java.lang.String format(java.util.Date)
    public static java.lang.String format(java.util.Date,boolean)
    public static java.lang.String format(java.util.Date,boolean,java.util.TimeZone)
    private static void padInt(java.lang.StringBuilder,int,int)
com.google.gson.internal.sql.SqlTypesSupport$1:
    protected java.sql.Date deserialize(java.util.Date)
    protected synthetic bridge java.util.Date deserialize(java.util.Date)
com.google.gson.internal.sql.SqlTypesSupport$2:
    protected java.sql.Timestamp deserialize(java.util.Date)
    protected synthetic bridge java.util.Date deserialize(java.util.Date)
com.google.gson.internal.sql.SqlTypesSupport:
    private void <init>()
com.google.gson.reflect.TypeToken:
    private static varargs java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type,java.lang.Class[])
    public static com.google.gson.reflect.TypeToken getArray(java.lang.reflect.Type)
    public static varargs com.google.gson.reflect.TypeToken getParameterized(java.lang.reflect.Type,java.lang.reflect.Type[])
    public boolean isAssignableFrom(com.google.gson.reflect.TypeToken)
    public boolean isAssignableFrom(java.lang.Class)
    public boolean isAssignableFrom(java.lang.reflect.Type)
    private static boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.GenericArrayType)
    private static boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)
    private static boolean matches(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)
    private static boolean typeEquals(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType,java.util.Map)
com.google.gson.stream.JsonReader:
    private static final long MIN_INCOMPLETE_INTEGER
    private static final int NUMBER_CHAR_DECIMAL
    private static final int NUMBER_CHAR_DIGIT
    private static final int NUMBER_CHAR_EXP_DIGIT
    private static final int NUMBER_CHAR_EXP_E
    private static final int NUMBER_CHAR_EXP_SIGN
    private static final int NUMBER_CHAR_FRACTION_DIGIT
    private static final int NUMBER_CHAR_NONE
    private static final int NUMBER_CHAR_SIGN
    private static final int PEEKED_BEGIN_ARRAY
    private static final int PEEKED_BEGIN_OBJECT
    private static final int PEEKED_BUFFERED
    private static final int PEEKED_DOUBLE_QUOTED
    private static final int PEEKED_DOUBLE_QUOTED_NAME
    private static final int PEEKED_END_ARRAY
    private static final int PEEKED_END_OBJECT
    private static final int PEEKED_EOF
    private static final int PEEKED_FALSE
    private static final int PEEKED_LONG
    private static final int PEEKED_NONE
    private static final int PEEKED_NULL
    private static final int PEEKED_NUMBER
    private static final int PEEKED_SINGLE_QUOTED
    private static final int PEEKED_SINGLE_QUOTED_NAME
    private static final int PEEKED_TRUE
    private static final int PEEKED_UNQUOTED
    private static final int PEEKED_UNQUOTED_NAME
com.google.gson.stream.JsonScope
com.google.gson.stream.JsonWriter:
    public final boolean isHtmlSafe()
    public com.google.gson.stream.JsonWriter jsonValue(java.lang.String)
    public final void setHtmlSafe(boolean)
    public final void setIndent(java.lang.String)
    public final void setSerializeNulls(boolean)
    public com.google.gson.stream.JsonWriter value(double)
com.hjq.permissions.AndroidManifestInfo$PermissionInfo:
    private static final int REQUESTED_PERMISSION_NEVER_FOR_LOCATION
com.hjq.permissions.AndroidManifestParser:
    private static final java.lang.String ANDROID_MANIFEST_FILE_NAME
    private static final java.lang.String ANDROID_NAMESPACE_URI
    private static final java.lang.String ATTR_MAX_SDK_VERSION
    private static final java.lang.String ATTR_MIN_SDK_VERSION
    private static final java.lang.String ATTR_NAME
    private static final java.lang.String ATTR_PACKAGE
    private static final java.lang.String ATTR_PERMISSION
    private static final java.lang.String ATTR_REQUEST_LEGACY_EXTERNAL_STORAGE
    private static final java.lang.String ATTR_SUPPORTS_PICTURE_IN_PICTURE
    private static final java.lang.String ATTR_USES_PERMISSION_FLAGS
    private static final java.lang.String TAG_ACTIVITY
    private static final java.lang.String TAG_ACTIVITY_ALIAS
    private static final java.lang.String TAG_APPLICATION
    private static final java.lang.String TAG_MANIFEST
    private static final java.lang.String TAG_SERVICE
    private static final java.lang.String TAG_USES_PERMISSION
    private static final java.lang.String TAG_USES_PERMISSION_SDK_23
    private static final java.lang.String TAG_USES_PERMISSION_SDK_M
    private static final java.lang.String TAG_USES_SDK
    void <init>()
com.hjq.permissions.AndroidVersion:
    static final int ANDROID_10
    static final int ANDROID_11
    static final int ANDROID_12
    static final int ANDROID_12_L
    static final int ANDROID_13
    static final int ANDROID_4_0
    static final int ANDROID_4_1
    static final int ANDROID_4_2
    static final int ANDROID_4_3
    static final int ANDROID_4_4
    static final int ANDROID_5
    static final int ANDROID_5_1
    static final int ANDROID_6
    static final int ANDROID_7
    static final int ANDROID_7_1
    static final int ANDROID_8
    static final int ANDROID_8_1
    static final int ANDROID_9
    void <init>()
    static boolean isAndroid4()
    static boolean isAndroid7_1()
com.hjq.permissions.Permission$Group
com.hjq.permissions.Permission:
    public static final java.lang.String ACCEPT_HANDOVER
    public static final java.lang.String ACCESS_BACKGROUND_LOCATION
    public static final java.lang.String ACCESS_COARSE_LOCATION
    public static final java.lang.String ACCESS_FINE_LOCATION
    public static final java.lang.String ACCESS_MEDIA_LOCATION
    public static final java.lang.String ACCESS_NOTIFICATION_POLICY
    public static final java.lang.String ACTIVITY_RECOGNITION
    public static final java.lang.String ADD_VOICEMAIL
    public static final java.lang.String ANSWER_PHONE_CALLS
    public static final java.lang.String BIND_NOTIFICATION_LISTENER_SERVICE
    public static final java.lang.String BIND_VPN_SERVICE
    public static final java.lang.String BLUETOOTH_ADVERTISE
    public static final java.lang.String BLUETOOTH_CONNECT
    public static final java.lang.String BLUETOOTH_SCAN
    public static final java.lang.String BODY_SENSORS
    public static final java.lang.String BODY_SENSORS_BACKGROUND
    public static final java.lang.String CALL_PHONE
    public static final java.lang.String CAMERA
    public static final java.lang.String GET_ACCOUNTS
    public static final java.lang.String GET_INSTALLED_APPS
    public static final java.lang.String MANAGE_EXTERNAL_STORAGE
    public static final java.lang.String NEARBY_WIFI_DEVICES
    public static final java.lang.String NOTIFICATION_SERVICE
    public static final java.lang.String PACKAGE_USAGE_STATS
    public static final java.lang.String PICTURE_IN_PICTURE
    public static final java.lang.String POST_NOTIFICATIONS
    public static final java.lang.String PROCESS_OUTGOING_CALLS
    public static final java.lang.String READ_CALENDAR
    public static final java.lang.String READ_CALL_LOG
    public static final java.lang.String READ_CONTACTS
    public static final java.lang.String READ_EXTERNAL_STORAGE
    public static final java.lang.String READ_MEDIA_AUDIO
    public static final java.lang.String READ_MEDIA_IMAGES
    public static final java.lang.String READ_MEDIA_VIDEO
    public static final java.lang.String READ_PHONE_NUMBERS
    public static final java.lang.String READ_PHONE_STATE
    public static final java.lang.String READ_SMS
    public static final java.lang.String RECEIVE_MMS
    public static final java.lang.String RECEIVE_SMS
    public static final java.lang.String RECEIVE_WAP_PUSH
    public static final java.lang.String RECORD_AUDIO
    public static final java.lang.String REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
    public static final java.lang.String REQUEST_INSTALL_PACKAGES
    public static final java.lang.String SCHEDULE_EXACT_ALARM
    public static final java.lang.String SEND_SMS
    public static final java.lang.String SYSTEM_ALERT_WINDOW
    public static final java.lang.String USE_SIP
    public static final java.lang.String WRITE_CALENDAR
    public static final java.lang.String WRITE_CALL_LOG
    public static final java.lang.String WRITE_CONTACTS
    public static final java.lang.String WRITE_EXTERNAL_STORAGE
    public static final java.lang.String WRITE_SETTINGS
com.hjq.permissions.PermissionApi:
    void <init>()
    static java.util.List getDeniedPermissions(android.content.Context,java.util.List)
com.hjq.permissions.PermissionChecker:
    void <init>()
com.hjq.permissions.PermissionFragment:
    private static final java.lang.String REQUEST_CODE
    private static final java.lang.String REQUEST_PERMISSIONS
com.hjq.permissions.PermissionPageFragment:
    private static final java.lang.String REQUEST_PERMISSIONS
    public void attachActivity(android.app.Activity)
    public static void beginRequest(android.app.Activity,java.util.ArrayList,com.hjq.permissions.OnPermissionPageCallback)
    public void setCallBack(com.hjq.permissions.OnPermissionPageCallback)
    public void setRequestFlag(boolean)
com.hjq.permissions.PermissionUtils:
    void <init>()
    static varargs java.util.ArrayList asArrayLists(java.lang.Object[][])
com.hjq.permissions.R
com.hjq.permissions.XXPermissions:
    public static final int REQUEST_CODE
    public static boolean containsSpecial(java.util.List)
    public static varargs boolean containsSpecial(java.lang.String[])
    public static java.util.List getDenied(android.content.Context,java.util.List)
    public static varargs java.util.List getDenied(android.content.Context,java.lang.String[])
    public static varargs java.util.List getDenied(android.content.Context,java.lang.String[][])
    public com.hjq.permissions.XXPermissions interceptor(com.hjq.permissions.IPermissionInterceptor)
    public static varargs boolean isGranted(android.content.Context,java.lang.String[][])
    public static boolean isPermanentDenied(android.app.Activity,java.util.List)
    public static varargs boolean isPermanentDenied(android.app.Activity,java.lang.String[])
    public static varargs boolean isPermanentDenied(android.app.Activity,java.lang.String[][])
    public static boolean isSpecial(java.lang.String)
    public varargs com.hjq.permissions.XXPermissions permission(java.lang.String[][])
    public boolean revokeOnKill()
    public static void setCheckMode(boolean)
    public static void setInterceptor(com.hjq.permissions.IPermissionInterceptor)
    public static void startPermissionActivity(android.app.Activity)
    public static void startPermissionActivity(android.app.Activity,java.lang.String,com.hjq.permissions.OnPermissionPageCallback)
    public static void startPermissionActivity(android.app.Activity,java.util.List,com.hjq.permissions.OnPermissionPageCallback)
    public static varargs void startPermissionActivity(android.app.Activity,java.lang.String[])
    public static void startPermissionActivity(android.app.Activity,java.lang.String[],com.hjq.permissions.OnPermissionPageCallback)
    public static varargs void startPermissionActivity(android.app.Activity,java.lang.String[][])
    public static void startPermissionActivity(android.app.Fragment)
    public static void startPermissionActivity(android.app.Fragment,java.lang.String,com.hjq.permissions.OnPermissionPageCallback)
    public static void startPermissionActivity(android.app.Fragment,java.util.List)
    public static void startPermissionActivity(android.app.Fragment,java.util.List,int)
    public static void startPermissionActivity(android.app.Fragment,java.util.List,com.hjq.permissions.OnPermissionPageCallback)
    public static varargs void startPermissionActivity(android.app.Fragment,java.lang.String[])
    public static void startPermissionActivity(android.app.Fragment,java.lang.String[],com.hjq.permissions.OnPermissionPageCallback)
    public static varargs void startPermissionActivity(android.app.Fragment,java.lang.String[][])
    public static void startPermissionActivity(android.content.Context)
    public static void startPermissionActivity(android.content.Context,java.util.List)
    public static varargs void startPermissionActivity(android.content.Context,java.lang.String[])
    public static varargs void startPermissionActivity(android.content.Context,java.lang.String[][])
    public static void startPermissionActivity(androidx.fragment.app.Fragment)
    public static void startPermissionActivity(androidx.fragment.app.Fragment,java.lang.String,com.hjq.permissions.OnPermissionPageCallback)
    public static void startPermissionActivity(androidx.fragment.app.Fragment,java.util.List)
    public static void startPermissionActivity(androidx.fragment.app.Fragment,java.util.List,int)
    public static void startPermissionActivity(androidx.fragment.app.Fragment,java.util.List,com.hjq.permissions.OnPermissionPageCallback)
    public static varargs void startPermissionActivity(androidx.fragment.app.Fragment,java.lang.String[])
    public static void startPermissionActivity(androidx.fragment.app.Fragment,java.lang.String[],com.hjq.permissions.OnPermissionPageCallback)
    public static varargs void startPermissionActivity(androidx.fragment.app.Fragment,java.lang.String[][])
    public com.hjq.permissions.XXPermissions unchecked()
    public static com.hjq.permissions.XXPermissions with(android.app.Fragment)
    public static com.hjq.permissions.XXPermissions with(androidx.fragment.app.Fragment)
com.hjq.toast.CustomToast:
    public void setAnimationsId(int)
    public void setLongDuration(int)
    public void setShortDuration(int)
    public void setText(int)
com.hjq.toast.R
com.hjq.toast.ToastStrategy$CancelToastRunnable
com.hjq.toast.ToastStrategy:
    private static final int DEFAULT_DELAY_TIMEOUT
    public static final int SHOW_STRATEGY_TYPE_IMMEDIATELY
    public static final int SHOW_STRATEGY_TYPE_QUEUE
    public void cancelToast()
com.hjq.toast.Toaster:
    public static void cancel()
    public static void debugShow(int)
    public static void debugShow(java.lang.CharSequence)
    public static void debugShow(java.lang.Object)
    public static void delayedShow(int,long)
    public static void delayedShow(java.lang.CharSequence,long)
    public static void delayedShow(java.lang.Object,long)
    public static com.hjq.toast.config.IToastInterceptor getInterceptor()
    public static com.hjq.toast.config.IToastStrategy getStrategy()
    public static com.hjq.toast.config.IToastStyle getStyle()
    public static void init(android.app.Application,com.hjq.toast.config.IToastStrategy)
    public static boolean isInit()
    private static java.lang.CharSequence objectToCharSequence(java.lang.Object)
    public static void setDebugMode(boolean)
    public static void setGravity(int)
    public static void setGravity(int,int,int)
    public static void setGravity(int,int,int,float,float)
    public static void setInterceptor(com.hjq.toast.config.IToastInterceptor)
    public static void setView(int)
    public static void show(int)
    public static void show(java.lang.Object)
    public static void showLong(int)
    public static void showLong(java.lang.CharSequence)
    public static void showLong(java.lang.Object)
    public static void showShort(int)
    public static void showShort(java.lang.CharSequence)
    public static void showShort(java.lang.Object)
    private static java.lang.CharSequence stringIdToCharSequence(int)
com.hjq.toast.config.IToast:
    public abstract int getDuration()
    public abstract int getGravity()
    public abstract float getHorizontalMargin()
    public abstract float getVerticalMargin()
    public abstract android.view.View getView()
    public abstract int getXOffset()
    public abstract int getYOffset()
    public abstract void setText(int)
com.hjq.toast.config.IToastStrategy:
    public abstract void cancelToast()
    public abstract com.hjq.toast.config.IToast createToast(com.hjq.toast.config.IToastStyle)
com.hjq.toast.style.LocationToastStyle
com.hjq.toast.style.WhiteToastStyle
com.lun.auto.BuildConfig
com.lun.auto.R
com.lun.auto.images.NotificationHelper$InstanceHolder:
    private void <init>()
com.lun.auto.images.NotificationHelper:
    private static final java.lang.String CHANNEL_ID_OTHER
    private static final java.lang.String CHANNEL_ID_SYSTEM
    private static final int CHANNEL_IMPORTANCE_OTHER
    private static final int CHANNEL_IMPORTANCE_SYSTEM
    private static final java.lang.String CHANNEL_NAME_OTHER
    private static final java.lang.String CHANNEL_NAME_SYSTEM
    public androidx.core.app.NotificationCompat$Builder createOther()
    public void show(int,android.app.Notification)
com.lun.auto.images.mediaprojection.interfaces.MediaRecorderCallback:
    public void <init>()
com.lun.auto.images.mediaprojection.service.MediaProjectionService$2
com.lun.auto.images.mediaprojection.service.MediaProjectionService:
    private static final int ID_MEDIA_PROJECTION
    static synthetic com.lun.auto.images.mediaprojection.interfaces.MediaRecorderCallback access$100(com.lun.auto.images.mediaprojection.service.MediaProjectionService)
    private void createMediaRecorder()
    public void startRecording(com.lun.auto.images.mediaprojection.interfaces.MediaRecorderCallback)
com.lun.auto.images.mediaprojection.utils.FileUtils
com.lun.auto.images.mediaprojection.utils.MediaProjectionHelper$InstanceHolder:
    private void <init>()
com.lun.auto.images.mediaprojection.utils.MediaProjectionHelper:
    public static final int REQUEST_CODE
    public void startMediaRecorder(com.lun.auto.images.mediaprojection.interfaces.MediaRecorderCallback)
    public void stopMediaRecorder()
com.lun.auto.images.utils.Base64Utils$Coder
com.lun.auto.images.utils.Base64Utils$Decoder
com.lun.auto.images.utils.Base64Utils$Encoder
com.lun.auto.images.utils.Base64Utils
com.lun.auto.images.utils.BitmapUtils:
    public static byte[] bitmapToByte(android.graphics.Bitmap)
    public static android.graphics.drawable.Drawable bitmapToDrawable(android.graphics.Bitmap)
    public static java.lang.String bitmapToString(android.graphics.Bitmap)
    public static android.content.Intent buildImageCaptureIntent(android.net.Uri)
    public static android.content.Intent buildImageCropIntent(android.net.Uri,android.net.Uri,int,int,int,int,boolean)
    public static android.content.Intent buildImageCropIntent(android.net.Uri,android.net.Uri,int,int,boolean)
    public static android.content.Intent buildImageGetIntent(android.net.Uri,int,int,int,int,boolean)
    public static android.content.Intent buildImageGetIntent(android.net.Uri,int,int,boolean)
    public static android.graphics.Bitmap byteToBitmap(byte[])
    public static int calculateInSampleSize(android.graphics.BitmapFactory$Options,int,int)
    public byte[] compressBitmapQuikly(java.lang.String)
    public byte[] compressBitmapQuiklySmallTo(java.lang.String,int)
    public byte[] compressBitmapSmallTo(java.lang.String,int,int,int)
    public byte[] compressBitmapToBytes(java.lang.String,int,int,int)
    public static android.graphics.Bitmap createBitmapThumbnail(android.graphics.Bitmap,boolean,int,int)
    public static android.graphics.Bitmap drawableToBitmap(android.graphics.drawable.Drawable)
    public static android.graphics.Bitmap getSmallBitmap(java.lang.String,int,int)
    public static android.graphics.Bitmap scaleImage(android.graphics.Bitmap,float,float)
    public static android.graphics.Bitmap scaleImageTo(android.graphics.Bitmap,int,int)
    public static android.graphics.Bitmap toRoundCorner(android.graphics.Bitmap)
com.lun.auto.utils.NiuLogUtils:
    public void <init>()
com.lun.auto.utils.NiuShellUtils$CommandResult
com.lun.auto.utils.NiuShellUtils
com.lun.autoscript.BuildConfig
com.lun.autoscript.R
com.lun.tflite.BuildConfig
com.lun.tflite.R
com.lun.tflite.Recognition:
    public void setConfidence(java.lang.Float)
    public void setLabelId(int)
    public void setLabelScore(java.lang.Float)
com.lzf.easyfloat.BuildConfig
com.lzf.easyfloat.R
com.lzf.easyfloat.permission.rom.HuaweiUtils:
    private static final java.lang.String TAG
    public void <init>()
com.lzf.easyfloat.permission.rom.MeizuUtils:
    private static final java.lang.String TAG
    public void <init>()
com.lzf.easyfloat.permission.rom.MiuiUtils:
    private static final java.lang.String TAG
    public void <init>()
com.lzf.easyfloat.permission.rom.OppoUtils:
    private static final java.lang.String TAG
    public void <init>()
com.lzf.easyfloat.permission.rom.QikuUtils:
    private static final java.lang.String TAG
    public void <init>()
kotlinx.coroutines.DelicateCoroutinesApi
kotlinx.coroutines.ExperimentalCoroutinesApi
kotlinx.coroutines.FlowPreview
kotlinx.coroutines.InternalCoroutinesApi
kotlinx.coroutines.ObsoleteCoroutinesApi
kotlinx.coroutines.debug.AgentPremain$$InternalSyntheticLambda$1$7895cd395e43c061a299e224a1d3672f97bd4610fe97f0e188c9c199a1620b54$0:
    public final void handle(sun.misc.Signal)
kotlinx.coroutines.debug.AgentPremain:
    public static synthetic void $r8$lambda$8e1eAWGNJu9vYr96rU9gzKJ_uMQ(sun.misc.Signal)
kotlinx.coroutines.internal.Concurrent_commonKt
kotlinx.coroutines.internal.LockFreeTaskQueueKt
okio.ExperimentalFileSystem
org.checkerframework.checker.compilermsgs.qual.CompilerMessageKey
org.checkerframework.checker.compilermsgs.qual.CompilerMessageKeyBottom
org.checkerframework.checker.compilermsgs.qual.UnknownCompilerMessageKey
org.checkerframework.checker.fenum.qual.AwtAlphaCompositingRule
org.checkerframework.checker.fenum.qual.AwtColorSpace
org.checkerframework.checker.fenum.qual.AwtCursorType
org.checkerframework.checker.fenum.qual.AwtFlowLayout
org.checkerframework.checker.fenum.qual.Fenum
org.checkerframework.checker.fenum.qual.FenumBottom
org.checkerframework.checker.fenum.qual.FenumTop
org.checkerframework.checker.fenum.qual.FenumUnqualified
org.checkerframework.checker.fenum.qual.PolyFenum
org.checkerframework.checker.fenum.qual.SwingBoxOrientation
org.checkerframework.checker.fenum.qual.SwingCompassDirection
org.checkerframework.checker.fenum.qual.SwingElementOrientation
org.checkerframework.checker.fenum.qual.SwingHorizontalOrientation
org.checkerframework.checker.fenum.qual.SwingSplitPaneOrientation
org.checkerframework.checker.fenum.qual.SwingTextOrientation
org.checkerframework.checker.fenum.qual.SwingTitleJustification
org.checkerframework.checker.fenum.qual.SwingTitlePosition
org.checkerframework.checker.fenum.qual.SwingVerticalOrientation
org.checkerframework.checker.formatter.FormatUtil$Conversion
org.checkerframework.checker.formatter.FormatUtil
org.checkerframework.checker.formatter.qual.Format
org.checkerframework.checker.formatter.qual.FormatBottom
org.checkerframework.checker.formatter.qual.FormatMethod
org.checkerframework.checker.formatter.qual.InvalidFormat
org.checkerframework.checker.formatter.qual.ReturnsFormat
org.checkerframework.checker.formatter.qual.UnknownFormat
org.checkerframework.checker.guieffect.qual.AlwaysSafe
org.checkerframework.checker.guieffect.qual.PolyUI
org.checkerframework.checker.guieffect.qual.PolyUIEffect
org.checkerframework.checker.guieffect.qual.PolyUIType
org.checkerframework.checker.guieffect.qual.SafeEffect
org.checkerframework.checker.guieffect.qual.SafeType
org.checkerframework.checker.guieffect.qual.UI
org.checkerframework.checker.guieffect.qual.UIEffect
org.checkerframework.checker.guieffect.qual.UIPackage
org.checkerframework.checker.guieffect.qual.UIType
org.checkerframework.checker.i18n.qual.LocalizableKey
org.checkerframework.checker.i18n.qual.LocalizableKeyBottom
org.checkerframework.checker.i18n.qual.Localized
org.checkerframework.checker.i18n.qual.UnknownLocalizableKey
org.checkerframework.checker.i18n.qual.UnknownLocalized
org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion
org.checkerframework.checker.i18nformatter.I18nFormatUtil$MessageFormatParser
org.checkerframework.checker.i18nformatter.I18nFormatUtil
org.checkerframework.checker.i18nformatter.qual.I18nChecksFormat
org.checkerframework.checker.i18nformatter.qual.I18nFormat
org.checkerframework.checker.i18nformatter.qual.I18nFormatBottom
org.checkerframework.checker.i18nformatter.qual.I18nFormatFor
org.checkerframework.checker.i18nformatter.qual.I18nInvalidFormat
org.checkerframework.checker.i18nformatter.qual.I18nMakeFormat
org.checkerframework.checker.i18nformatter.qual.I18nUnknownFormat
org.checkerframework.checker.i18nformatter.qual.I18nValidFormat
org.checkerframework.checker.index.qual.EnsuresLTLengthOf
org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf
org.checkerframework.checker.index.qual.GTENegativeOne
org.checkerframework.checker.index.qual.HasSubsequence
org.checkerframework.checker.index.qual.IndexFor
org.checkerframework.checker.index.qual.IndexOrHigh
org.checkerframework.checker.index.qual.IndexOrLow
org.checkerframework.checker.index.qual.LTEqLengthOf
org.checkerframework.checker.index.qual.LTLengthOf
org.checkerframework.checker.index.qual.LTOMLengthOf
org.checkerframework.checker.index.qual.LengthOf
org.checkerframework.checker.index.qual.LessThan
org.checkerframework.checker.index.qual.LessThanBottom
org.checkerframework.checker.index.qual.LessThanUnknown
org.checkerframework.checker.index.qual.LowerBoundBottom
org.checkerframework.checker.index.qual.LowerBoundUnknown
org.checkerframework.checker.index.qual.NegativeIndexFor
org.checkerframework.checker.index.qual.NonNegative
org.checkerframework.checker.index.qual.PolyIndex
org.checkerframework.checker.index.qual.PolyLength
org.checkerframework.checker.index.qual.PolyLowerBound
org.checkerframework.checker.index.qual.PolySameLen
org.checkerframework.checker.index.qual.PolyUpperBound
org.checkerframework.checker.index.qual.Positive
org.checkerframework.checker.index.qual.SameLen
org.checkerframework.checker.index.qual.SameLenBottom
org.checkerframework.checker.index.qual.SameLenUnknown
org.checkerframework.checker.index.qual.SearchIndexBottom
org.checkerframework.checker.index.qual.SearchIndexFor
org.checkerframework.checker.index.qual.SearchIndexUnknown
org.checkerframework.checker.index.qual.SubstringIndexBottom
org.checkerframework.checker.index.qual.SubstringIndexFor
org.checkerframework.checker.index.qual.SubstringIndexUnknown
org.checkerframework.checker.index.qual.UpperBoundBottom
org.checkerframework.checker.index.qual.UpperBoundUnknown
org.checkerframework.checker.initialization.qual.FBCBottom
org.checkerframework.checker.initialization.qual.Initialized
org.checkerframework.checker.initialization.qual.NotOnlyInitialized
org.checkerframework.checker.initialization.qual.UnderInitialization
org.checkerframework.checker.initialization.qual.UnknownInitialization
org.checkerframework.checker.interning.qual.Interned
org.checkerframework.checker.interning.qual.InternedDistinct
org.checkerframework.checker.interning.qual.PolyInterned
org.checkerframework.checker.interning.qual.UnknownInterned
org.checkerframework.checker.interning.qual.UsesObjectEquals
org.checkerframework.checker.lock.qual.EnsuresLockHeld
org.checkerframework.checker.lock.qual.EnsuresLockHeldIf
org.checkerframework.checker.lock.qual.GuardSatisfied
org.checkerframework.checker.lock.qual.GuardedBy
org.checkerframework.checker.lock.qual.GuardedByBottom
org.checkerframework.checker.lock.qual.GuardedByUnknown
org.checkerframework.checker.lock.qual.Holding
org.checkerframework.checker.lock.qual.LockHeld
org.checkerframework.checker.lock.qual.LockPossiblyHeld
org.checkerframework.checker.lock.qual.LockingFree
org.checkerframework.checker.lock.qual.MayReleaseLocks
org.checkerframework.checker.lock.qual.ReleasesNoLocks
org.checkerframework.checker.nullness.NullnessUtil
org.checkerframework.checker.nullness.Opt
org.checkerframework.checker.nullness.qual.AssertNonNullIfNonNull
org.checkerframework.checker.nullness.qual.EnsuresKeyFor
org.checkerframework.checker.nullness.qual.EnsuresKeyForIf
org.checkerframework.checker.nullness.qual.EnsuresNonNull
org.checkerframework.checker.nullness.qual.EnsuresNonNullIf
org.checkerframework.checker.nullness.qual.KeyFor
org.checkerframework.checker.nullness.qual.KeyForBottom
org.checkerframework.checker.nullness.qual.MonotonicNonNull
org.checkerframework.checker.nullness.qual.NonNull
org.checkerframework.checker.nullness.qual.NonRaw
org.checkerframework.checker.nullness.qual.Nullable
org.checkerframework.checker.nullness.qual.PolyKeyFor
org.checkerframework.checker.nullness.qual.PolyNull
org.checkerframework.checker.nullness.qual.PolyRaw
org.checkerframework.checker.nullness.qual.Raw
org.checkerframework.checker.nullness.qual.RequiresNonNull
org.checkerframework.checker.nullness.qual.UnknownKeyFor
org.checkerframework.checker.optional.qual.MaybePresent
org.checkerframework.checker.optional.qual.PolyPresent
org.checkerframework.checker.optional.qual.Present
org.checkerframework.checker.propkey.qual.PropertyKey
org.checkerframework.checker.propkey.qual.PropertyKeyBottom
org.checkerframework.checker.propkey.qual.UnknownPropertyKey
org.checkerframework.checker.regex.RegexUtil
org.checkerframework.checker.regex.qual.PartialRegex
org.checkerframework.checker.regex.qual.PolyRegex
org.checkerframework.checker.regex.qual.Regex
org.checkerframework.checker.regex.qual.RegexBottom
org.checkerframework.checker.regex.qual.UnknownRegex
org.checkerframework.checker.signature.qual.BinaryName
org.checkerframework.checker.signature.qual.BinaryNameInUnnamedPackage
org.checkerframework.checker.signature.qual.ClassGetName
org.checkerframework.checker.signature.qual.ClassGetSimpleName
org.checkerframework.checker.signature.qual.DotSeparatedIdentifiers
org.checkerframework.checker.signature.qual.FieldDescriptor
org.checkerframework.checker.signature.qual.FieldDescriptorForPrimitive
org.checkerframework.checker.signature.qual.FieldDescriptorForPrimitiveOrArrayInUnnamedPackage
org.checkerframework.checker.signature.qual.FullyQualifiedName
org.checkerframework.checker.signature.qual.Identifier
org.checkerframework.checker.signature.qual.IdentifierOrArray
org.checkerframework.checker.signature.qual.InternalForm
org.checkerframework.checker.signature.qual.MethodDescriptor
org.checkerframework.checker.signature.qual.PolySignature
org.checkerframework.checker.signature.qual.SignatureBottom
org.checkerframework.checker.signature.qual.SignatureUnknown
org.checkerframework.checker.signedness.SignednessUtil
org.checkerframework.checker.signedness.qual.Constant
org.checkerframework.checker.signedness.qual.PolySignedness
org.checkerframework.checker.signedness.qual.Signed
org.checkerframework.checker.signedness.qual.SignednessBottom
org.checkerframework.checker.signedness.qual.UnknownSignedness
org.checkerframework.checker.signedness.qual.Unsigned
org.checkerframework.checker.tainting.qual.PolyTainted
org.checkerframework.checker.tainting.qual.Tainted
org.checkerframework.checker.tainting.qual.Untainted
org.checkerframework.checker.units.UnitsTools
org.checkerframework.checker.units.qual.A
org.checkerframework.checker.units.qual.Acceleration
org.checkerframework.checker.units.qual.Angle
org.checkerframework.checker.units.qual.Area
org.checkerframework.checker.units.qual.C
org.checkerframework.checker.units.qual.Current
org.checkerframework.checker.units.qual.K
org.checkerframework.checker.units.qual.Length
org.checkerframework.checker.units.qual.Luminance
org.checkerframework.checker.units.qual.Mass
org.checkerframework.checker.units.qual.MixedUnits
org.checkerframework.checker.units.qual.PolyUnit
org.checkerframework.checker.units.qual.Speed
org.checkerframework.checker.units.qual.Substance
org.checkerframework.checker.units.qual.Temperature
org.checkerframework.checker.units.qual.Time
org.checkerframework.checker.units.qual.UnitsBottom
org.checkerframework.checker.units.qual.UnitsMultiple
org.checkerframework.checker.units.qual.UnitsRelations
org.checkerframework.checker.units.qual.UnknownUnits
org.checkerframework.checker.units.qual.cd
org.checkerframework.checker.units.qual.degrees
org.checkerframework.checker.units.qual.g
org.checkerframework.checker.units.qual.h
org.checkerframework.checker.units.qual.kg
org.checkerframework.checker.units.qual.km2
org.checkerframework.checker.units.qual.km
org.checkerframework.checker.units.qual.kmPERh
org.checkerframework.checker.units.qual.m2
org.checkerframework.checker.units.qual.m
org.checkerframework.checker.units.qual.mPERs2
org.checkerframework.checker.units.qual.mPERs
org.checkerframework.checker.units.qual.min
org.checkerframework.checker.units.qual.mm2
org.checkerframework.checker.units.qual.mm
org.checkerframework.checker.units.qual.mol
org.checkerframework.checker.units.qual.radians
org.checkerframework.checker.units.qual.s
org.checkerframework.common.aliasing.qual.LeakedToResult
org.checkerframework.common.aliasing.qual.MaybeAliased
org.checkerframework.common.aliasing.qual.MaybeLeaked
org.checkerframework.common.aliasing.qual.NonLeaked
org.checkerframework.common.aliasing.qual.Unique
org.checkerframework.common.reflection.qual.ClassBound
org.checkerframework.common.reflection.qual.ClassVal
org.checkerframework.common.reflection.qual.ClassValBottom
org.checkerframework.common.reflection.qual.ForName
org.checkerframework.common.reflection.qual.GetClass
org.checkerframework.common.reflection.qual.GetConstructor
org.checkerframework.common.reflection.qual.GetMethod
org.checkerframework.common.reflection.qual.Invoke
org.checkerframework.common.reflection.qual.MethodVal
org.checkerframework.common.reflection.qual.MethodValBottom
org.checkerframework.common.reflection.qual.NewInstance
org.checkerframework.common.reflection.qual.UnknownClass
org.checkerframework.common.reflection.qual.UnknownMethod
org.checkerframework.common.subtyping.qual.Bottom
org.checkerframework.common.subtyping.qual.Unqualified
org.checkerframework.common.util.report.qual.ReportCall
org.checkerframework.common.util.report.qual.ReportCreation
org.checkerframework.common.util.report.qual.ReportInherit
org.checkerframework.common.util.report.qual.ReportOverride
org.checkerframework.common.util.report.qual.ReportReadWrite
org.checkerframework.common.util.report.qual.ReportUnqualified
org.checkerframework.common.util.report.qual.ReportUse
org.checkerframework.common.util.report.qual.ReportWrite
org.checkerframework.common.value.qual.ArrayLen
org.checkerframework.common.value.qual.ArrayLenRange
org.checkerframework.common.value.qual.BoolVal
org.checkerframework.common.value.qual.BottomVal
org.checkerframework.common.value.qual.DoubleVal
org.checkerframework.common.value.qual.EnsuresMinLenIf
org.checkerframework.common.value.qual.IntRange
org.checkerframework.common.value.qual.IntRangeFromGTENegativeOne
org.checkerframework.common.value.qual.IntRangeFromNonNegative
org.checkerframework.common.value.qual.IntRangeFromPositive
org.checkerframework.common.value.qual.IntVal
org.checkerframework.common.value.qual.MinLen
org.checkerframework.common.value.qual.MinLenFieldInvariant
org.checkerframework.common.value.qual.PolyValue
org.checkerframework.common.value.qual.StaticallyExecutable
org.checkerframework.common.value.qual.StringVal
org.checkerframework.common.value.qual.UnknownVal
org.checkerframework.dataflow.qual.Deterministic
org.checkerframework.dataflow.qual.Pure
org.checkerframework.dataflow.qual.SideEffectFree
org.checkerframework.dataflow.qual.TerminatesExecution
org.checkerframework.framework.qual.AnnotatedFor
org.checkerframework.framework.qual.ConditionalPostconditionAnnotation
org.checkerframework.framework.qual.Covariant
org.checkerframework.framework.qual.DefaultFor
org.checkerframework.framework.qual.DefaultInUncheckedCodeFor
org.checkerframework.framework.qual.DefaultQualifier
org.checkerframework.framework.qual.DefaultQualifierInHierarchy
org.checkerframework.framework.qual.DefaultQualifierInHierarchyInUncheckedCode
org.checkerframework.framework.qual.DefaultQualifiers
org.checkerframework.framework.qual.EnsuresQualifier
org.checkerframework.framework.qual.EnsuresQualifierIf
org.checkerframework.framework.qual.EnsuresQualifiers
org.checkerframework.framework.qual.EnsuresQualifiersIf
org.checkerframework.framework.qual.FieldInvariant
org.checkerframework.framework.qual.FromByteCode
org.checkerframework.framework.qual.FromStubFile
org.checkerframework.framework.qual.IgnoreInWholeProgramInference
org.checkerframework.framework.qual.ImplicitFor
org.checkerframework.framework.qual.InheritedAnnotation
org.checkerframework.framework.qual.InvisibleQualifier
org.checkerframework.framework.qual.JavaExpression
org.checkerframework.framework.qual.MonotonicQualifier
org.checkerframework.framework.qual.PolyAll
org.checkerframework.framework.qual.PolymorphicQualifier
org.checkerframework.framework.qual.PostconditionAnnotation
org.checkerframework.framework.qual.PreconditionAnnotation
org.checkerframework.framework.qual.QualifierArgument
org.checkerframework.framework.qual.RelevantJavaTypes
org.checkerframework.framework.qual.RequiresQualifier
org.checkerframework.framework.qual.RequiresQualifiers
org.checkerframework.framework.qual.StubFiles
org.checkerframework.framework.qual.SubtypeOf
org.checkerframework.framework.qual.TargetLocations
org.checkerframework.framework.qual.Unused
org.checkerframework.framework.util.PurityUnqualified
org.intellij.lang.annotations.Flow
org.intellij.lang.annotations.Identifier
org.intellij.lang.annotations.JdkConstants$AdjustableOrientation
org.intellij.lang.annotations.JdkConstants$BoxLayoutAxis
org.intellij.lang.annotations.JdkConstants$CalendarMonth
org.intellij.lang.annotations.JdkConstants$CursorType
org.intellij.lang.annotations.JdkConstants$FlowLayoutAlignment
org.intellij.lang.annotations.JdkConstants$FontStyle
org.intellij.lang.annotations.JdkConstants$HorizontalAlignment
org.intellij.lang.annotations.JdkConstants$InputEventMask
org.intellij.lang.annotations.JdkConstants$ListSelectionMode
org.intellij.lang.annotations.JdkConstants$PatternFlags
org.intellij.lang.annotations.JdkConstants$TabLayoutPolicy
org.intellij.lang.annotations.JdkConstants$TabPlacement
org.intellij.lang.annotations.JdkConstants$TitledBorderJustification
org.intellij.lang.annotations.JdkConstants$TitledBorderTitlePosition
org.intellij.lang.annotations.JdkConstants$TreeSelectionMode
org.intellij.lang.annotations.JdkConstants
org.intellij.lang.annotations.Language
org.intellij.lang.annotations.MagicConstant
org.intellij.lang.annotations.Pattern
org.intellij.lang.annotations.PrintFormat
org.intellij.lang.annotations.PrintFormatPattern
org.intellij.lang.annotations.RegExp
org.intellij.lang.annotations.Subst
org.tensorflow.lite.DataTypeUtils:
    private void <init>()
org.tensorflow.lite.Interpreter$Options:
    public void <init>(org.tensorflow.lite.InterpreterApi$Options)
    void <init>(org.tensorflow.lite.InterpreterImpl$Options)
    public synthetic bridge org.tensorflow.lite.InterpreterApi$Options addDelegate(org.tensorflow.lite.Delegate)
    public org.tensorflow.lite.Interpreter$Options setAllowBufferHandleOutput(boolean)
    public org.tensorflow.lite.Interpreter$Options setAllowFp16PrecisionForFp32(boolean)
    public org.tensorflow.lite.Interpreter$Options setCancellable(boolean)
    public synthetic bridge org.tensorflow.lite.InterpreterApi$Options setCancellable(boolean)
    public synthetic bridge org.tensorflow.lite.InterpreterApi$Options setNumThreads(int)
    public org.tensorflow.lite.Interpreter$Options setUseNNAPI(boolean)
    public synthetic bridge org.tensorflow.lite.InterpreterApi$Options setUseNNAPI(boolean)
    public org.tensorflow.lite.Interpreter$Options setUseXNNPACK(boolean)
org.tensorflow.lite.Interpreter:
    public void <init>(java.io.File)
    public void <init>(java.io.File,org.tensorflow.lite.Interpreter$Options)
    public void <init>(java.nio.ByteBuffer)
    public synthetic bridge void allocateTensors()
    public synthetic bridge int getInputIndex(java.lang.String)
    public synthetic bridge int getInputTensorCount()
    public org.tensorflow.lite.Tensor getInputTensorFromSignature(java.lang.String,java.lang.String)
    public synthetic bridge java.lang.Long getLastNativeInferenceDurationNanoseconds()
    public synthetic bridge int getOutputIndex(java.lang.String)
    public synthetic bridge int getOutputTensorCount()
    public org.tensorflow.lite.Tensor getOutputTensorFromSignature(java.lang.String,java.lang.String)
    public java.lang.String[] getSignatureInputs(java.lang.String)
    public java.lang.String[] getSignatureOutputs(java.lang.String)
    public void resetVariableTensors()
    public synthetic bridge void resizeInput(int,int[])
    public synthetic bridge void resizeInput(int,int[],boolean)
    public void runSignature(java.util.Map,java.util.Map)
    public void runSignature(java.util.Map,java.util.Map,java.lang.String)
    public void setCancelled(boolean)
org.tensorflow.lite.InterpreterApi$Options:
    public void <init>(org.tensorflow.lite.InterpreterApi$Options)
    public org.tensorflow.lite.InterpreterApi$Options setCancellable(boolean)
    public org.tensorflow.lite.InterpreterApi$Options setUseNNAPI(boolean)
org.tensorflow.lite.InterpreterApi
org.tensorflow.lite.InterpreterFactory
org.tensorflow.lite.InterpreterImpl$Options:
    public void <init>(org.tensorflow.lite.InterpreterApi$Options)
    public void <init>(org.tensorflow.lite.InterpreterImpl$Options)
org.tensorflow.lite.InterpreterImpl:
    public void <init>(java.io.File)
    public void <init>(java.io.File,org.tensorflow.lite.InterpreterImpl$Options)
    public void <init>(java.nio.ByteBuffer)
    public void <init>(java.nio.ByteBuffer,org.tensorflow.lite.InterpreterImpl$Options)
    public void allocateTensors()
    int getExecutionPlanLength()
    public int getInputIndex(java.lang.String)
    public int getInputTensorCount()
    public java.lang.Long getLastNativeInferenceDurationNanoseconds()
    public int getOutputIndex(java.lang.String)
    public int getOutputTensorCount()
    public void resizeInput(int,int[])
    public void resizeInput(int,int[],boolean)
org.tensorflow.lite.NativeInterpreterWrapper:
    private static final int ERROR_BUFFER_SIZE
    private java.util.Map signatureRunnerMap
    private java.util.Map tensorToInputsIndexes
    private java.util.Map tensorToOutputsIndexes
    void <init>(java.lang.String)
    void <init>(java.lang.String,org.tensorflow.lite.InterpreterImpl$Options)
    void <init>(java.nio.ByteBuffer)
    void allocateTensors()
    private static native long createModel(java.lang.String,long)
    int getExecutionPlanLength()
    private static native int getExecutionPlanLength(long)
    int getInputIndex(java.lang.String)
    private static native java.lang.String[] getInputNames(long)
    org.tensorflow.lite.TensorImpl getInputTensor(java.lang.String,java.lang.String)
    int getInputTensorCount()
    java.lang.Long getLastNativeInferenceDurationNanoseconds()
    private static native int getOutputDataType(long,int)
    int getOutputIndex(java.lang.String)
    private static native java.lang.String[] getOutputNames(long)
    org.tensorflow.lite.TensorImpl getOutputTensor(java.lang.String,java.lang.String)
    int getOutputTensorCount()
    java.lang.String[] getSignatureInputs(java.lang.String)
    java.lang.String[] getSignatureOutputs(java.lang.String)
    private org.tensorflow.lite.NativeSignatureRunnerWrapper getSignatureRunnerWrapper(java.lang.String)
    private void initTensorIndexesMaps()
    private static native void resetVariableTensors(long,long)
    public void runSignature(java.util.Map,java.util.Map,java.lang.String)
    private static native void setCancelled(long,long,boolean)
    void setCancelled(boolean)
org.tensorflow.lite.NativeInterpreterWrapperExperimental:
    void <init>(java.lang.String)
    void <init>(java.lang.String,org.tensorflow.lite.InterpreterImpl$Options)
    void <init>(java.nio.ByteBuffer)
    void resetVariableTensors()
    private static native void resetVariableTensors(long,long)
org.tensorflow.lite.NativeSignatureRunnerWrapper
org.tensorflow.lite.R
org.tensorflow.lite.Tensor:
    public abstract java.nio.ByteBuffer asReadOnlyBuffer()
    public abstract int index()
    public abstract java.lang.String name()
    public abstract int numBytes()
    public abstract int numDimensions()
    public abstract int numElements()
    public abstract int[] shapeSignature()
org.tensorflow.lite.TensorFlowLite:
    private static final java.lang.String ALTERNATE_LIBNAME
    private static final java.lang.String LIBNAME
    private void <init>()
    private static native java.lang.String nativeRuntimeVersion()
    private static native java.lang.String nativeSchemaVersion()
    public static java.lang.String runtimeVersion()
    public static java.lang.String schemaVersion()
    public static java.lang.String version()
org.tensorflow.lite.TensorImpl:
    public java.nio.ByteBuffer asReadOnlyBuffer()
    static int computeNumElements(int[])
    private static native long createSignatureInputTensor(long,java.lang.String)
    private static native long createSignatureOutputTensor(long,java.lang.String)
    static org.tensorflow.lite.TensorImpl fromSignatureInput(long,java.lang.String)
    static org.tensorflow.lite.TensorImpl fromSignatureOutput(long,java.lang.String)
    public int index()
    private static native int index(long)
    public int numDimensions()
    public int numElements()
    public int[] shapeSignature()
org.tensorflow.lite.XnnpackDelegate:
    private long deleteFunction
    private long nativeHandle
    void <init>(long,long)
    private static native void applyDeleteFunction(long,long)
    public void close()
    public long getNativeHandle()
org.tensorflow.lite.annotations.UsedByReflection:
    public abstract java.lang.String value()
org.tensorflow.lite.gpu.CompatibilityList:
    private static final long INVALID_COMPATIBILITY_LIST_HANDLE
    private static final java.lang.String TFLITE_GPU_LIB
org.tensorflow.lite.gpu.GpuDelegate$Options:
    public static final int INFERENCE_PREFERENCE_FAST_SINGLE_ANSWER
    public static final int INFERENCE_PREFERENCE_SUSTAINED_SPEED
    public org.tensorflow.lite.gpu.GpuDelegate$Options setInferencePreference(int)
    public org.tensorflow.lite.gpu.GpuDelegate$Options setPrecisionLossAllowed(boolean)
    public org.tensorflow.lite.gpu.GpuDelegate$Options setQuantizedModelsAllowed(boolean)
    public org.tensorflow.lite.gpu.GpuDelegate$Options setSerializationParams(java.lang.String,java.lang.String)
org.tensorflow.lite.gpu.GpuDelegate:
    private static final long INVALID_DELEGATE_HANDLE
    private static final java.lang.String TFLITE_GPU_LIB
org.tensorflow.lite.nnapi.NnApiDelegate$Options:
    public static final int EXECUTION_PREFERENCE_FAST_SINGLE_ANSWER
    public static final int EXECUTION_PREFERENCE_LOW_POWER
    public static final int EXECUTION_PREFERENCE_SUSTAINED_SPEED
    public static final int EXECUTION_PREFERENCE_UNDEFINED
    public org.tensorflow.lite.nnapi.NnApiDelegate$Options setAcceleratorName(java.lang.String)
    public org.tensorflow.lite.nnapi.NnApiDelegate$Options setAllowFp16(boolean)
    public org.tensorflow.lite.nnapi.NnApiDelegate$Options setCacheDir(java.lang.String)
    public org.tensorflow.lite.nnapi.NnApiDelegate$Options setExecutionPreference(int)
    public org.tensorflow.lite.nnapi.NnApiDelegate$Options setMaxNumberOfDelegatedPartitions(int)
    public org.tensorflow.lite.nnapi.NnApiDelegate$Options setModelToken(java.lang.String)
    public org.tensorflow.lite.nnapi.NnApiDelegate$Options setNnApiSupportLibraryHandle(long)
    public org.tensorflow.lite.nnapi.NnApiDelegate$Options setUseNnapiCpu(boolean)
org.tensorflow.lite.nnapi.NnApiDelegate:
    private static final long INVALID_DELEGATE_HANDLE
    private void checkNotClosed()
    public int getNnapiErrno()
    private static native int getNnapiErrno(long)
    public boolean hasErrors()
org.tensorflow.lite.schema.AbsOptions$Vector
org.tensorflow.lite.schema.AbsOptions
org.tensorflow.lite.schema.ActivationFunctionType
org.tensorflow.lite.schema.AddNOptions$Vector
org.tensorflow.lite.schema.AddNOptions
org.tensorflow.lite.schema.AddOptions$Vector
org.tensorflow.lite.schema.AddOptions
org.tensorflow.lite.schema.ArgMaxOptions$Vector
org.tensorflow.lite.schema.ArgMaxOptions
org.tensorflow.lite.schema.ArgMinOptions$Vector
org.tensorflow.lite.schema.ArgMinOptions
org.tensorflow.lite.schema.AssignVariableOptions$Vector
org.tensorflow.lite.schema.AssignVariableOptions
org.tensorflow.lite.schema.BatchMatMulOptions$Vector
org.tensorflow.lite.schema.BatchMatMulOptions
org.tensorflow.lite.schema.BatchToSpaceNDOptions$Vector
org.tensorflow.lite.schema.BatchToSpaceNDOptions
org.tensorflow.lite.schema.BidirectionalSequenceLSTMOptions$Vector
org.tensorflow.lite.schema.BidirectionalSequenceLSTMOptions
org.tensorflow.lite.schema.BidirectionalSequenceRNNOptions$Vector
org.tensorflow.lite.schema.BidirectionalSequenceRNNOptions
org.tensorflow.lite.schema.BroadcastToOptions$Vector
org.tensorflow.lite.schema.BroadcastToOptions
org.tensorflow.lite.schema.BucketizeOptions$Vector
org.tensorflow.lite.schema.BucketizeOptions
org.tensorflow.lite.schema.Buffer$Vector
org.tensorflow.lite.schema.Buffer
org.tensorflow.lite.schema.BuiltinOperator
org.tensorflow.lite.schema.BuiltinOptions
org.tensorflow.lite.schema.CallOnceOptions$Vector
org.tensorflow.lite.schema.CallOnceOptions
org.tensorflow.lite.schema.CallOptions$Vector
org.tensorflow.lite.schema.CallOptions
org.tensorflow.lite.schema.CastOptions$Vector
org.tensorflow.lite.schema.CastOptions
org.tensorflow.lite.schema.CombinerType
org.tensorflow.lite.schema.ConcatEmbeddingsOptions$Vector
org.tensorflow.lite.schema.ConcatEmbeddingsOptions
org.tensorflow.lite.schema.ConcatenationOptions$Vector
org.tensorflow.lite.schema.ConcatenationOptions
org.tensorflow.lite.schema.Conv2DOptions$Vector
org.tensorflow.lite.schema.Conv2DOptions
org.tensorflow.lite.schema.Conv3DOptions$Vector
org.tensorflow.lite.schema.Conv3DOptions
org.tensorflow.lite.schema.CosOptions$Vector
org.tensorflow.lite.schema.CosOptions
org.tensorflow.lite.schema.CumsumOptions$Vector
org.tensorflow.lite.schema.CumsumOptions
org.tensorflow.lite.schema.CustomOptionsFormat
org.tensorflow.lite.schema.CustomQuantization$Vector
org.tensorflow.lite.schema.CustomQuantization
org.tensorflow.lite.schema.DensifyOptions$Vector
org.tensorflow.lite.schema.DensifyOptions
org.tensorflow.lite.schema.DepthToSpaceOptions$Vector
org.tensorflow.lite.schema.DepthToSpaceOptions
org.tensorflow.lite.schema.DepthwiseConv2DOptions$Vector
org.tensorflow.lite.schema.DepthwiseConv2DOptions
org.tensorflow.lite.schema.DequantizeOptions$Vector
org.tensorflow.lite.schema.DequantizeOptions
org.tensorflow.lite.schema.DimensionMetadata$Vector
org.tensorflow.lite.schema.DimensionMetadata
org.tensorflow.lite.schema.DimensionType
org.tensorflow.lite.schema.DivOptions$Vector
org.tensorflow.lite.schema.DivOptions
org.tensorflow.lite.schema.EmbeddingLookupSparseOptions$Vector
org.tensorflow.lite.schema.EmbeddingLookupSparseOptions
org.tensorflow.lite.schema.EqualOptions$Vector
org.tensorflow.lite.schema.EqualOptions
org.tensorflow.lite.schema.ExpOptions$Vector
org.tensorflow.lite.schema.ExpOptions
org.tensorflow.lite.schema.ExpandDimsOptions$Vector
org.tensorflow.lite.schema.ExpandDimsOptions
org.tensorflow.lite.schema.FakeQuantOptions$Vector
org.tensorflow.lite.schema.FakeQuantOptions
org.tensorflow.lite.schema.FillOptions$Vector
org.tensorflow.lite.schema.FillOptions
org.tensorflow.lite.schema.FloorDivOptions$Vector
org.tensorflow.lite.schema.FloorDivOptions
org.tensorflow.lite.schema.FloorModOptions$Vector
org.tensorflow.lite.schema.FloorModOptions
org.tensorflow.lite.schema.FullyConnectedOptions$Vector
org.tensorflow.lite.schema.FullyConnectedOptions
org.tensorflow.lite.schema.FullyConnectedOptionsWeightsFormat
org.tensorflow.lite.schema.GatherNdOptions$Vector
org.tensorflow.lite.schema.GatherNdOptions
org.tensorflow.lite.schema.GatherOptions$Vector
org.tensorflow.lite.schema.GatherOptions
org.tensorflow.lite.schema.GreaterEqualOptions$Vector
org.tensorflow.lite.schema.GreaterEqualOptions
org.tensorflow.lite.schema.GreaterOptions$Vector
org.tensorflow.lite.schema.GreaterOptions
org.tensorflow.lite.schema.HardSwishOptions$Vector
org.tensorflow.lite.schema.HardSwishOptions
org.tensorflow.lite.schema.HashtableFindOptions$Vector
org.tensorflow.lite.schema.HashtableFindOptions
org.tensorflow.lite.schema.HashtableImportOptions$Vector
org.tensorflow.lite.schema.HashtableImportOptions
org.tensorflow.lite.schema.HashtableOptions$Vector
org.tensorflow.lite.schema.HashtableOptions
org.tensorflow.lite.schema.HashtableSizeOptions$Vector
org.tensorflow.lite.schema.HashtableSizeOptions
org.tensorflow.lite.schema.IfOptions$Vector
org.tensorflow.lite.schema.IfOptions
org.tensorflow.lite.schema.Int32Vector$Vector
org.tensorflow.lite.schema.Int32Vector
org.tensorflow.lite.schema.L2NormOptions$Vector
org.tensorflow.lite.schema.L2NormOptions
org.tensorflow.lite.schema.LSHProjectionOptions$Vector
org.tensorflow.lite.schema.LSHProjectionOptions
org.tensorflow.lite.schema.LSHProjectionType
org.tensorflow.lite.schema.LSTMKernelType
org.tensorflow.lite.schema.LSTMOptions$Vector
org.tensorflow.lite.schema.LSTMOptions
org.tensorflow.lite.schema.LeakyReluOptions$Vector
org.tensorflow.lite.schema.LeakyReluOptions
org.tensorflow.lite.schema.LessEqualOptions$Vector
org.tensorflow.lite.schema.LessEqualOptions
org.tensorflow.lite.schema.LessOptions$Vector
org.tensorflow.lite.schema.LessOptions
org.tensorflow.lite.schema.LocalResponseNormalizationOptions$Vector
org.tensorflow.lite.schema.LocalResponseNormalizationOptions
org.tensorflow.lite.schema.LogSoftmaxOptions$Vector
org.tensorflow.lite.schema.LogSoftmaxOptions
org.tensorflow.lite.schema.LogicalAndOptions$Vector
org.tensorflow.lite.schema.LogicalAndOptions
org.tensorflow.lite.schema.LogicalNotOptions$Vector
org.tensorflow.lite.schema.LogicalNotOptions
org.tensorflow.lite.schema.LogicalOrOptions$Vector
org.tensorflow.lite.schema.LogicalOrOptions
org.tensorflow.lite.schema.MatrixDiagOptions$Vector
org.tensorflow.lite.schema.MatrixDiagOptions
org.tensorflow.lite.schema.MatrixSetDiagOptions$Vector
org.tensorflow.lite.schema.MatrixSetDiagOptions
org.tensorflow.lite.schema.MaximumMinimumOptions$Vector
org.tensorflow.lite.schema.MaximumMinimumOptions
org.tensorflow.lite.schema.Metadata$Vector
org.tensorflow.lite.schema.Metadata
org.tensorflow.lite.schema.MirrorPadMode
org.tensorflow.lite.schema.MirrorPadOptions$Vector
org.tensorflow.lite.schema.MirrorPadOptions
org.tensorflow.lite.schema.Model$Vector
org.tensorflow.lite.schema.Model
org.tensorflow.lite.schema.MulOptions$Vector
org.tensorflow.lite.schema.MulOptions
org.tensorflow.lite.schema.NegOptions$Vector
org.tensorflow.lite.schema.NegOptions
org.tensorflow.lite.schema.NonMaxSuppressionV4Options$Vector
org.tensorflow.lite.schema.NonMaxSuppressionV4Options
org.tensorflow.lite.schema.NonMaxSuppressionV5Options$Vector
org.tensorflow.lite.schema.NonMaxSuppressionV5Options
org.tensorflow.lite.schema.NotEqualOptions$Vector
org.tensorflow.lite.schema.NotEqualOptions
org.tensorflow.lite.schema.OneHotOptions$Vector
org.tensorflow.lite.schema.OneHotOptions
org.tensorflow.lite.schema.Operator$Vector
org.tensorflow.lite.schema.Operator
org.tensorflow.lite.schema.OperatorCode$Vector
org.tensorflow.lite.schema.OperatorCode
org.tensorflow.lite.schema.PackOptions$Vector
org.tensorflow.lite.schema.PackOptions
org.tensorflow.lite.schema.PadOptions$Vector
org.tensorflow.lite.schema.PadOptions
org.tensorflow.lite.schema.PadV2Options$Vector
org.tensorflow.lite.schema.PadV2Options
org.tensorflow.lite.schema.Padding
org.tensorflow.lite.schema.Pool2DOptions$Vector
org.tensorflow.lite.schema.Pool2DOptions
org.tensorflow.lite.schema.PowOptions$Vector
org.tensorflow.lite.schema.PowOptions
org.tensorflow.lite.schema.QuantizationDetails
org.tensorflow.lite.schema.QuantizationParameters$Vector
org.tensorflow.lite.schema.QuantizationParameters
org.tensorflow.lite.schema.QuantizeOptions$Vector
org.tensorflow.lite.schema.QuantizeOptions
org.tensorflow.lite.schema.RNNOptions$Vector
org.tensorflow.lite.schema.RNNOptions
org.tensorflow.lite.schema.RandomOptions$Vector
org.tensorflow.lite.schema.RandomOptions
org.tensorflow.lite.schema.RangeOptions$Vector
org.tensorflow.lite.schema.RangeOptions
org.tensorflow.lite.schema.RankOptions$Vector
org.tensorflow.lite.schema.RankOptions
org.tensorflow.lite.schema.ReadVariableOptions$Vector
org.tensorflow.lite.schema.ReadVariableOptions
org.tensorflow.lite.schema.ReducerOptions$Vector
org.tensorflow.lite.schema.ReducerOptions
org.tensorflow.lite.schema.ReshapeOptions$Vector
org.tensorflow.lite.schema.ReshapeOptions
org.tensorflow.lite.schema.ResizeBilinearOptions$Vector
org.tensorflow.lite.schema.ResizeBilinearOptions
org.tensorflow.lite.schema.ResizeNearestNeighborOptions$Vector
org.tensorflow.lite.schema.ResizeNearestNeighborOptions
org.tensorflow.lite.schema.ReverseSequenceOptions$Vector
org.tensorflow.lite.schema.ReverseSequenceOptions
org.tensorflow.lite.schema.ReverseV2Options$Vector
org.tensorflow.lite.schema.ReverseV2Options
org.tensorflow.lite.schema.Rfft2dOptions$Vector
org.tensorflow.lite.schema.Rfft2dOptions
org.tensorflow.lite.schema.SVDFOptions$Vector
org.tensorflow.lite.schema.SVDFOptions
org.tensorflow.lite.schema.ScatterNdOptions$Vector
org.tensorflow.lite.schema.ScatterNdOptions
org.tensorflow.lite.schema.SegmentSumOptions$Vector
org.tensorflow.lite.schema.SegmentSumOptions
org.tensorflow.lite.schema.SelectOptions$Vector
org.tensorflow.lite.schema.SelectOptions
org.tensorflow.lite.schema.SelectV2Options$Vector
org.tensorflow.lite.schema.SelectV2Options
org.tensorflow.lite.schema.SequenceRNNOptions$Vector
org.tensorflow.lite.schema.SequenceRNNOptions
org.tensorflow.lite.schema.ShapeOptions$Vector
org.tensorflow.lite.schema.ShapeOptions
org.tensorflow.lite.schema.SignatureDef$Vector
org.tensorflow.lite.schema.SignatureDef
org.tensorflow.lite.schema.SkipGramOptions$Vector
org.tensorflow.lite.schema.SkipGramOptions
org.tensorflow.lite.schema.SliceOptions$Vector
org.tensorflow.lite.schema.SliceOptions
org.tensorflow.lite.schema.SoftmaxOptions$Vector
org.tensorflow.lite.schema.SoftmaxOptions
org.tensorflow.lite.schema.SpaceToBatchNDOptions$Vector
org.tensorflow.lite.schema.SpaceToBatchNDOptions
org.tensorflow.lite.schema.SpaceToDepthOptions$Vector
org.tensorflow.lite.schema.SpaceToDepthOptions
org.tensorflow.lite.schema.SparseIndexVector
org.tensorflow.lite.schema.SparseToDenseOptions$Vector
org.tensorflow.lite.schema.SparseToDenseOptions
org.tensorflow.lite.schema.SparsityParameters$Vector
org.tensorflow.lite.schema.SparsityParameters
org.tensorflow.lite.schema.SplitOptions$Vector
org.tensorflow.lite.schema.SplitOptions
org.tensorflow.lite.schema.SplitVOptions$Vector
org.tensorflow.lite.schema.SplitVOptions
org.tensorflow.lite.schema.SquareOptions$Vector
org.tensorflow.lite.schema.SquareOptions
org.tensorflow.lite.schema.SquaredDifferenceOptions$Vector
org.tensorflow.lite.schema.SquaredDifferenceOptions
org.tensorflow.lite.schema.SqueezeOptions$Vector
org.tensorflow.lite.schema.SqueezeOptions
org.tensorflow.lite.schema.StridedSliceOptions$Vector
org.tensorflow.lite.schema.StridedSliceOptions
org.tensorflow.lite.schema.SubGraph$Vector
org.tensorflow.lite.schema.SubGraph
org.tensorflow.lite.schema.SubOptions$Vector
org.tensorflow.lite.schema.SubOptions
org.tensorflow.lite.schema.Tensor$Vector
org.tensorflow.lite.schema.Tensor
org.tensorflow.lite.schema.TensorMap$Vector
org.tensorflow.lite.schema.TensorMap
org.tensorflow.lite.schema.TensorType
org.tensorflow.lite.schema.TileOptions$Vector
org.tensorflow.lite.schema.TileOptions
org.tensorflow.lite.schema.TopKV2Options$Vector
org.tensorflow.lite.schema.TopKV2Options
org.tensorflow.lite.schema.TransposeConvOptions$Vector
org.tensorflow.lite.schema.TransposeConvOptions
org.tensorflow.lite.schema.TransposeOptions$Vector
org.tensorflow.lite.schema.TransposeOptions
org.tensorflow.lite.schema.Uint16Vector$Vector
org.tensorflow.lite.schema.Uint16Vector
org.tensorflow.lite.schema.Uint8Vector$Vector
org.tensorflow.lite.schema.Uint8Vector
org.tensorflow.lite.schema.UnidirectionalSequenceLSTMOptions$Vector
org.tensorflow.lite.schema.UnidirectionalSequenceLSTMOptions
org.tensorflow.lite.schema.UniqueOptions$Vector
org.tensorflow.lite.schema.UniqueOptions
org.tensorflow.lite.schema.UnpackOptions$Vector
org.tensorflow.lite.schema.UnpackOptions
org.tensorflow.lite.schema.VarHandleOptions$Vector
org.tensorflow.lite.schema.VarHandleOptions
org.tensorflow.lite.schema.WhereOptions$Vector
org.tensorflow.lite.schema.WhereOptions
org.tensorflow.lite.schema.WhileOptions$Vector
org.tensorflow.lite.schema.WhileOptions
org.tensorflow.lite.schema.ZerosLikeOptions$Vector
org.tensorflow.lite.schema.ZerosLikeOptions
org.tensorflow.lite.support.R
org.tensorflow.lite.support.audio.AutoValue_TensorAudio_TensorAudioFormat$1
org.tensorflow.lite.support.audio.AutoValue_TensorAudio_TensorAudioFormat$Builder
org.tensorflow.lite.support.audio.AutoValue_TensorAudio_TensorAudioFormat
org.tensorflow.lite.support.audio.TensorAudio$FloatRingBuffer
org.tensorflow.lite.support.audio.TensorAudio$TensorAudioFormat$Builder
org.tensorflow.lite.support.audio.TensorAudio$TensorAudioFormat
org.tensorflow.lite.support.audio.TensorAudio
org.tensorflow.lite.support.common.FileUtil:
    private void <init>()
    public static byte[] loadByteFromFile(android.content.Context,java.lang.String)
    public static java.util.List loadLabels(java.io.InputStream)
    public static java.util.List loadSingleColumnTextFile(android.content.Context,java.lang.String,java.nio.charset.Charset)
    public static java.util.List loadSingleColumnTextFile(java.io.InputStream,java.nio.charset.Charset)
org.tensorflow.lite.support.common.Processor
org.tensorflow.lite.support.common.SequentialProcessor$Builder:
    public org.tensorflow.lite.support.common.SequentialProcessor build()
org.tensorflow.lite.support.common.TensorProcessor$Builder:
    public synthetic bridge org.tensorflow.lite.support.common.SequentialProcessor$Builder add(org.tensorflow.lite.support.common.Operator)
    public synthetic bridge org.tensorflow.lite.support.common.SequentialProcessor build()
org.tensorflow.lite.support.common.internal.SupportPreconditions:
    private void <init>()
    private static java.lang.String badElementIndex(int,int,java.lang.String)
    public static int checkElementIndex(int,int)
    public static int checkElementIndex(int,int,java.lang.String)
    public static java.lang.String checkNotEmpty(java.lang.String)
    public static java.lang.String checkNotEmpty(java.lang.String,java.lang.Object)
    public static java.lang.Object checkNotNull(java.lang.Object)
    public static void checkState(boolean)
org.tensorflow.lite.support.common.ops.NormalizeOp:
    public void <init>(float[],float[])
org.tensorflow.lite.support.image.AutoValue_ImageProperties$1
org.tensorflow.lite.support.image.AutoValue_ImageProperties$Builder
org.tensorflow.lite.support.image.AutoValue_ImageProperties
org.tensorflow.lite.support.image.AutoValue_MlImageAdapter_ImageFormatProxy
org.tensorflow.lite.support.image.BitmapContainer:
    public synthetic bridge org.tensorflow.lite.support.image.ImageContainer clone()
    public int getHeight()
    public android.media.Image getMediaImage()
    public int getWidth()
org.tensorflow.lite.support.image.BoundingBoxUtil$1
org.tensorflow.lite.support.image.BoundingBoxUtil
org.tensorflow.lite.support.image.ColorSpaceType$1:
    private static final int CHANNEL_VALUE
org.tensorflow.lite.support.image.ColorSpaceType$2:
    private static final int CHANNEL_VALUE
org.tensorflow.lite.support.image.ImageContainer:
    public abstract org.tensorflow.lite.support.image.ImageContainer clone()
    public abstract int getHeight()
    public abstract android.media.Image getMediaImage()
    public abstract int getWidth()
org.tensorflow.lite.support.image.ImageConversions:
    private void <init>()
org.tensorflow.lite.support.image.ImageOperator:
    public abstract org.tensorflow.lite.support.image.TensorImage apply(org.tensorflow.lite.support.image.TensorImage)
    public abstract int getOutputImageHeight(int,int)
    public abstract int getOutputImageWidth(int,int)
    public abstract android.graphics.PointF inverseTransform(android.graphics.PointF,int,int)
org.tensorflow.lite.support.image.ImageProcessor$Builder:
    public synthetic bridge org.tensorflow.lite.support.common.SequentialProcessor$Builder add(org.tensorflow.lite.support.common.Operator)
    public synthetic bridge org.tensorflow.lite.support.common.SequentialProcessor build()
org.tensorflow.lite.support.image.ImageProcessor:
    public android.graphics.PointF inverseTransform(android.graphics.PointF,int,int)
    public android.graphics.RectF inverseTransform(android.graphics.RectF,int,int)
    public synthetic bridge java.lang.Object process(java.lang.Object)
    public void updateNumberOfRotations(int)
    public synchronized void updateNumberOfRotations(int,int)
org.tensorflow.lite.support.image.ImageProperties$Builder
org.tensorflow.lite.support.image.ImageProperties
org.tensorflow.lite.support.image.MediaImageContainer
org.tensorflow.lite.support.image.MlImageAdapter$ImageFormatProxy
org.tensorflow.lite.support.image.MlImageAdapter
org.tensorflow.lite.support.image.TensorBufferContainer:
    public synthetic bridge org.tensorflow.lite.support.image.ImageContainer clone()
    static org.tensorflow.lite.support.image.TensorBufferContainer create(org.tensorflow.lite.support.tensorbuffer.TensorBuffer,org.tensorflow.lite.support.image.ImageProperties)
    public android.media.Image getMediaImage()
org.tensorflow.lite.support.image.TensorImage:
    public static org.tensorflow.lite.support.image.TensorImage createFrom(org.tensorflow.lite.support.image.TensorImage,org.tensorflow.lite.DataType)
    public static org.tensorflow.lite.support.image.TensorImage fromBitmap(android.graphics.Bitmap)
    public org.tensorflow.lite.DataType getDataType()
    public int getHeight()
    public android.media.Image getMediaImage()
    public int getWidth()
    public void load(android.media.Image)
    public void load(java.nio.ByteBuffer,org.tensorflow.lite.support.image.ImageProperties)
    public void load(org.tensorflow.lite.support.tensorbuffer.TensorBuffer)
    public void load(org.tensorflow.lite.support.tensorbuffer.TensorBuffer,org.tensorflow.lite.support.image.ImageProperties)
    public void load(float[],int[])
    public void load(int[],int[])
org.tensorflow.lite.support.image.ops.ResizeOp:
    public int getOutputImageHeight(int,int)
    public int getOutputImageWidth(int,int)
    public android.graphics.PointF inverseTransform(android.graphics.PointF,int,int)
org.tensorflow.lite.support.image.ops.ResizeWithCropOrPadOp
org.tensorflow.lite.support.image.ops.Rot90Op
org.tensorflow.lite.support.image.ops.TensorOperatorWrapper:
    public int getOutputImageHeight(int,int)
    public int getOutputImageWidth(int,int)
    public android.graphics.PointF inverseTransform(android.graphics.PointF,int,int)
org.tensorflow.lite.support.image.ops.TransformToGrayscaleOp
org.tensorflow.lite.support.label.Category:
    private static final int DEFAULT_INDEX
    private static final float TOLERANCE
org.tensorflow.lite.support.label.LabelUtil
org.tensorflow.lite.support.label.TensorLabel
org.tensorflow.lite.support.label.ops.LabelAxisOp$Builder
org.tensorflow.lite.support.label.ops.LabelAxisOp
org.tensorflow.lite.support.metadata.BoundedInputStream
org.tensorflow.lite.support.metadata.ByteBufferChannel
org.tensorflow.lite.support.metadata.MetadataExtractor
org.tensorflow.lite.support.metadata.MetadataParser
org.tensorflow.lite.support.metadata.ModelInfo
org.tensorflow.lite.support.metadata.ModelMetadataInfo
org.tensorflow.lite.support.metadata.Preconditions
org.tensorflow.lite.support.metadata.SeekableByteChannelCompat
org.tensorflow.lite.support.metadata.ZipFile$1
org.tensorflow.lite.support.metadata.ZipFile$ZipConstants
org.tensorflow.lite.support.metadata.ZipFile$ZipEntry
org.tensorflow.lite.support.metadata.ZipFile$ZipParser
org.tensorflow.lite.support.metadata.ZipFile
org.tensorflow.lite.support.metadata.schema.AssociatedFile$Vector
org.tensorflow.lite.support.metadata.schema.AssociatedFile
org.tensorflow.lite.support.metadata.schema.AssociatedFileType
org.tensorflow.lite.support.metadata.schema.AudioProperties$Vector
org.tensorflow.lite.support.metadata.schema.AudioProperties
org.tensorflow.lite.support.metadata.schema.BertTokenizerOptions$Vector
org.tensorflow.lite.support.metadata.schema.BertTokenizerOptions
org.tensorflow.lite.support.metadata.schema.BoundingBoxProperties$Vector
org.tensorflow.lite.support.metadata.schema.BoundingBoxProperties
org.tensorflow.lite.support.metadata.schema.BoundingBoxType
org.tensorflow.lite.support.metadata.schema.ColorSpaceType
org.tensorflow.lite.support.metadata.schema.Content$Vector
org.tensorflow.lite.support.metadata.schema.Content
org.tensorflow.lite.support.metadata.schema.ContentProperties
org.tensorflow.lite.support.metadata.schema.CoordinateType
org.tensorflow.lite.support.metadata.schema.FeatureProperties$Vector
org.tensorflow.lite.support.metadata.schema.FeatureProperties
org.tensorflow.lite.support.metadata.schema.ImageProperties$Vector
org.tensorflow.lite.support.metadata.schema.ImageProperties
org.tensorflow.lite.support.metadata.schema.ImageSize$Vector
org.tensorflow.lite.support.metadata.schema.ImageSize
org.tensorflow.lite.support.metadata.schema.ModelMetadata$Vector
org.tensorflow.lite.support.metadata.schema.ModelMetadata
org.tensorflow.lite.support.metadata.schema.NormalizationOptions$Vector
org.tensorflow.lite.support.metadata.schema.NormalizationOptions
org.tensorflow.lite.support.metadata.schema.ProcessUnit$Vector
org.tensorflow.lite.support.metadata.schema.ProcessUnit
org.tensorflow.lite.support.metadata.schema.ProcessUnitOptions
org.tensorflow.lite.support.metadata.schema.RegexTokenizerOptions$Vector
org.tensorflow.lite.support.metadata.schema.RegexTokenizerOptions
org.tensorflow.lite.support.metadata.schema.ScoreCalibrationOptions$Vector
org.tensorflow.lite.support.metadata.schema.ScoreCalibrationOptions
org.tensorflow.lite.support.metadata.schema.ScoreThresholdingOptions$Vector
org.tensorflow.lite.support.metadata.schema.ScoreThresholdingOptions
org.tensorflow.lite.support.metadata.schema.ScoreTransformationType
org.tensorflow.lite.support.metadata.schema.SentencePieceTokenizerOptions$Vector
org.tensorflow.lite.support.metadata.schema.SentencePieceTokenizerOptions
org.tensorflow.lite.support.metadata.schema.Stats$Vector
org.tensorflow.lite.support.metadata.schema.Stats
org.tensorflow.lite.support.metadata.schema.SubGraphMetadata$Vector
org.tensorflow.lite.support.metadata.schema.SubGraphMetadata
org.tensorflow.lite.support.metadata.schema.TensorGroup$Vector
org.tensorflow.lite.support.metadata.schema.TensorGroup
org.tensorflow.lite.support.metadata.schema.TensorMetadata$Vector
org.tensorflow.lite.support.metadata.schema.TensorMetadata
org.tensorflow.lite.support.metadata.schema.ValueRange$Vector
org.tensorflow.lite.support.metadata.schema.ValueRange
org.tensorflow.lite.support.model.GpuDelegateProxy
org.tensorflow.lite.support.model.Model$1
org.tensorflow.lite.support.model.Model$Builder
org.tensorflow.lite.support.model.Model$Options$Builder
org.tensorflow.lite.support.model.Model$Options
org.tensorflow.lite.support.model.Model
org.tensorflow.lite.support.tensorbuffer.TensorBuffer:
    public abstract float getFloatValue(int)
    public abstract int getIntValue(int)
    public void loadArray(float[])
    public void loadArray(int[])
    public void loadBuffer(java.nio.ByteBuffer)
org.tensorflow.lite.support.tensorbuffer.TensorBufferFloat:
    public float getFloatValue(int)
    public int getIntValue(int)
org.tensorflow.lite.support.tensorbuffer.TensorBufferUint8:
    public float getFloatValue(int)
    public int getIntValue(int)
www.sanju.motiontoast.BuildConfig
www.sanju.motiontoast.R
androidx.core.location.LocationManagerCompat$$InternalSyntheticLambda$1$196e0315f48caa68131c5d4d780ff53e9618a06658f902ea94f753d0df163305$1
androidx.core.location.LocationManagerCompat:
    public static synthetic java.lang.Boolean $r8$lambda$JLIcm4BkQpukCiUbhX4BKZUICt4(android.location.LocationManager,androidx.core.location.LocationManagerCompat$GpsStatusTransport)
com.blankj.utilcode.util.KeyboardUtils:
    public static int sDecorViewDelta
com.hjq.permissions.OnPermissionPageCallback
com.hjq.permissions.PermissionApi:
    public static java.util.List getGrantedPermissions(android.content.Context,java.util.List)
com.hjq.permissions.PermissionPageFragment:
    public com.hjq.permissions.OnPermissionPageCallback mCallBack
com.lun.auto.images.mediaprojection.interfaces.MediaRecorderCallback
com.lun.auto.images.mediaprojection.service.MediaProjectionService:
    public com.lun.auto.images.mediaprojection.interfaces.MediaRecorderCallback mediaRecorderCallback
com.lun.auto.images.utils.BitmapUtils:
    public static final java.lang.String TAG
    public void <init>()
com.lzf.easyfloat.permission.rom.HuaweiUtils:
    public static void applyPermission(android.app.Fragment)
com.lzf.easyfloat.permission.rom.MiuiUtils:
    public static void applyMiuiPermission(android.app.Fragment)
    public static int getMiuiVersion()
    public static void goToMiuiPermissionActivity_V5(android.app.Fragment)
    public static void goToMiuiPermissionActivity_V6(android.app.Fragment)
    public static void goToMiuiPermissionActivity_V7(android.app.Fragment)
    public static void goToMiuiPermissionActivity_V8(android.app.Fragment)
    public static boolean isIntentAvailable(android.content.Intent,android.content.Context)
com.lzf.easyfloat.permission.rom.OppoUtils:
    public static void applyOppoPermission(android.app.Fragment)
com.lzf.easyfloat.permission.rom.QikuUtils:
    public static void applyPermission(android.app.Fragment)
    public static boolean isIntentAvailable(android.content.Intent,android.content.Context)
org.tensorflow.lite.support.image.TensorBufferContainer:
    public static final java.lang.String TAG
